---
##### THIS HAS TO GO FIRST #####
- name: Check Ansible version
  hosts: 127.0.0.1
  connection: local
  become: false
  vars_files: ../roles/common/vars/main.yml
  tasks:
    - name: Check Ansible version
      ansible.builtin.assert:
        that: "ansible_version.full is version_compare('{{ required_ansible_version }}', '==')"
        fail_msg:
          - Ansible {{ required_ansible_version }} is required.
          - Please run the Platform 3.0 upgrade preparation script.
          - If running a single-server setup, run "ansible-playbook -i hosts playbooks/procedures/upgrade-v3.yml"
          - If running a clustered-server setup, run "ansible-playbook -i cluster_hosts playbooks/procedures/upgrade-v3.yml"
        success_msg: Ansible {{ ansible_version.full }} matches expected version.

- name: Ensure ansible fact for offline_mode is defined
  hosts: all
  tasks:
    - name: Trigger housekeeping for offline_mode ansible facts
      ansible.builtin.include_role:
        name: "{{ inventory_dir }}/roles/housekeeping"
        tasks_from: ensure_ansible_fact_offline_mode_exists.yml
      when: ansible_local.offline_mode.stat.exists is undefined

- name: Check overall requirements
  hosts: all
  tasks:
    - name: Ensure config_done is not set during Packer image builds
      ansible.builtin.fail:
        msg:
          - "The config_done variable is defined, this cannot be present during packer builds."
          - "Please ensure there is no group_vars/all configuration file in place."
      when:
        - packer_build_name is defined
        - config_done is defined

    - name: Ensure config_done is defined on cluster setups
      ansible.builtin.fail:
        msg:
          - "The config_done variable is not defined."
          - "Please ensure there is a group_vars/all configuration file in place and config_done is set to true."
      when:
        - groups['all'] | length() > 1
        - config_done is not defined

    - name: Check if legacy installation is disabled
      ansible.builtin.assert:
        that:
          # Basic existence and type checks
          - external_hostname is defined
          - (external_hostname is string) or (external_hostname is sequence)
          - external_hostname | length > 0
          - dashboard_hostname is defined
          - dashboard_hostname is string
          - dashboard_hostname | length > 0
          - webclient_hostname is defined
          - webclient_hostname is string
          - webclient_hostname | length > 0
          # Uniqueness checks
          - >-
            (external_hostname is string and
            external_hostname != dashboard_hostname and
            external_hostname != webclient_hostname) or
            (external_hostname is sequence and
            (dashboard_hostname not in external_hostname) and
            (webclient_hostname not in external_hostname))
          - dashboard_hostname != webclient_hostname
        msg:
          - "If is_legacy_installation is set to 'false', external_hostname, dashboard_hostname and webclient_hostname must be set"
          - "All hostname values must be unique and cannot be the same"
          - "Please set these variables in group_vars/all file"
      when:
        - not (is_legacy_installation | default('True') | lower | bool)

    - name: Check if version fact files already exist
      ansible.builtin.stat:
        path: "{{ item }}"
      register: fact_files_status
      loop:
        - /etc/ansible/facts.d/backend_version.fact
        - /etc/ansible/facts.d/webclient_version.fact
        - /etc/ansible/facts.d/dashboard_version.fact

    - name: Create version fact files if they do not exist
      ansible.builtin.copy:
        dest: "{{ item.item }}"
        content: '{"tag": "1.0.0"}'
        mode: '0644'
      loop: "{{ fact_files_status.results }}"
      when: "not item.stat.exists"

    - name: Check if in developer mode
      ansible.builtin.set_fact:
        tw_dev_mode: "{{ lookup('env', 'tw_dev_mode') | ternary(True, False) }}"
      delegate_facts: true
      run_once: true

    - name: Assert use_teamwire_registry is valid
      ansible.builtin.assert:
        that:
          - use_teamwire_registry is string
          - use_teamwire_registry | lower is in ['true', 'false']
        msg: >-
          Invalid value for configuration option `use_teamwire_registry`.
          Please ensure your value is enquoted and is either 'true' or 'false'.
      run_once: true
      when: use_teamwire_registry is defined

    - name: Assert workers variable is valid.
      ansible.builtin.assert:
        that:
          - workers is string and workers|int
        msg: >-
          Invalid value for configuration option `workers`.
          Please ensure your value is quoted and is a string of numbers.
      run_once: true
      when: workers is defined

    - name: Assert that worker_gunicorn_max_requests is an integer
      ansible.builtin.assert:
        that:
          - worker_gunicorn_max_requests is integer
        msg: >-
          Please make sure that worker_gunicorn_max_requests is an unquoted integer.
      run_once: true
      when: worker_gunicorn_max_requests is defined

    - name: Assert channel_group_expiry variable is valid.
      ansible.builtin.assert:
        that:
          - channel_group_expiry is string and channel_group_expiry|int
        msg: >-
          Invalid value for configuration option `channel_group_expiry`.
          Please ensure your value is quoted and is a string of numbers.
      run_once: true
      when: channel_group_expiry is defined

    - name: Assert that disable_gc_reconfiguration is true or false
      ansible.builtin.assert:
        that:
          - disable_gc_reconfiguration | lower in [ "true", "false" ]
        msg: >-
          Please make sure that disable_gc_reconfiguration is either "false" or "true".
      run_once: true
      when: disable_gc_reconfiguration is defined

    - name: Ensure that fcm_account_file is set to quoted string or empty
      ansible.builtin.assert:
        that:
          - fcm_account_file is string
          - fcm_account_file is exists
        msg: >-
          Please ensure that the 'fcm_account_file' parameter is set to a quoted valid 'path' and exists
      when:
        - fcm_account_file is defined
        - fcm_account_file | length > 0

    - name: Check if internal and external stun options are enabled
      ansible.builtin.fail:
        msg: "Internal and external stun server cannot be activated at the same time."
      run_once: true
      when:
        - enable_external_turn_server is defined
        - enable_external_turn_server | lower == "true"
        - enable_stun is defined
        - enable_stun | lower == "true"

    - name: Ensure voip_server group has only one member
      ansible.builtin.assert:
        that:
          - "groups['voip_servers'] is defined"
          - "groups['voip_servers'] | length == 1"
        msg: >-
          WARNING: It seems like the group voip_servers has none or more than one member.
            If you have enable_voip set to true you have to define a host in this group.
            If you have more than one host in this group. Please only define one server.
          Please refer to the cluster_example_hosts file for an example.
      run_once: true
      when:
        - enable_voip is defined
        - enable_voip | lower == "true"
        - groups['all'] | length() > 1
        - tw_environments is not defined

    - name: Ensure enable_voip is a string when enabled
      ansible.builtin.assert:
        that:
          - enable_voip is string
          - enable_voip is in ['true', 'false']
        msg: >-
          Ensure value from enable_voip is set to lower quoted true or false when enabled
      run_once: true
      when:
        - enable_voip is defined

    - name: Ensure enable_stun is a string when enabled
      ansible.builtin.assert:
        that:
          - enable_stun is string
          - enable_stun is in ['true', 'false']
        msg: >-
          Ensure value from enable_stun is set to lower quoted true or false when enabled
      run_once: true
      when:
        - enable_stun is defined

    - name: Ensure enable_external_turn_server is a string when enabled
      ansible.builtin.assert:
        that:
          - enable_external_turn_server is string
          - enable_external_turn_server is in ['true', 'false']
        msg: >-
          Ensure value from enable_external_turn_server is set to lower quoted true or false when enabled
      run_once: true
      when:
        - enable_external_turn_server is defined

    - name: Ensure enable_jvb_cluster is a string when enabled
      ansible.builtin.assert:
        that:
          - enable_jvb_cluster is string
          - enable_jvb_cluster is in ['true', 'false']
        msg: >-
          Ensure value from enable_jvb_cluster is set to lower quoted true or false when enabled
      run_once: true
      when:
        - enable_jvb_cluster is defined

    - name: Ensure enable_voip is enabled when enable_stun is activated
      ansible.builtin.assert:
        that:
          - enable_voip is defined and enable_voip | lower == "true"
        msg: >-
          Ensure enable_voip is defined and value is set to quoted true
      run_once: true
      when:
        - enable_stun is defined
        - enable_stun | lower == "true"

    - name: Ensure jvb_public_ip is valid IPv4 address
      ansible.builtin.assert:
        that:
          - jvb_public_ip is string
          - jvb_public_ip is regex('^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$')
        msg: >-
          Ensure jvb_public_ip is a string containing an IPv4 address
      run_once: true
      when:
        - jvb_public_ip is defined

    - name: Ensure enable_voip is set to true when enable_jvb_cluster is activated
      ansible.builtin.assert:
        that:
          - enable_voip is defined and enable_voip | lower == "true"
        msg: >-
          Ensure enable_voip is defined and value is set to quoted true
      run_once: true
      when:
        - enable_jvb_cluster is defined
        - enable_jvb_cluster | lower == "true"

    - name: Ensure that enable_jvb_cluster is not set on single server installation
      ansible.builtin.assert:
        that: enable_jvb_cluster is not defined
        msg: >-
          The option 'enable_jvb_cluster' can not be set in a single server installation.
          Ensure to remove the option from group_vars/all file.
      when:
        - groups['all'] | length() == 1

    - name: Ensure that stun_hostname is set only if enable_stun is also set to true
      ansible.builtin.assert:
        that:
          - enable_stun is defined
          - enable_stun | lower == "true"
          - stun_hostname is defined
          - stun_hostname is string
          - stun_hostname | length >= 1
        msg: >-
          Please ensure that the 'enable_stun' parameter is set to 'true' and that the 'stun_hostname' parameter is set to a resolvable hostname pointing to the public IP of the VoIP Server.
          Please note that the 'stun_hostname' should never be left empty.
      run_once: true
      when: enable_stun is defined or stun_hostname is defined

    - name: Ensure that external_turn_server - external_turn_port is set only if enable_external_turn_server is also set to true
      ansible.builtin.assert:
        that:
          - enable_external_turn_server is defined
          - enable_external_turn_server | lower == "true"
          - external_turn_server is defined
          - external_turn_server is string
          - external_turn_server | length >= 1
        msg: >-
          Please ensure that the 'enable_external_turn_server' parameter is set to 'true' and that the 'external_turn_server' parameter is set to an existing external stun/turn server.
          Please note that the 'external_turn_server' should never be left empty.
      run_once: true
      when: enable_external_turn_server is defined or external_turn_server is defined or external_turn_port is defined

    - name: Warning about Stun/Turn server
      when: enable_stun is defined and enable_stun | lower == "true"
      block:
        - name: Warn the user about STUN/TURN server risks
          ansible.builtin.debug:
            msg: >
              Running your own STUN/TURN server is highly risky.
              It can introduce serious security vulnerabilities,
              so you should only consider starting it in extremely rare and exceptional cases.
              It's crucial that you understand these dangers fully to protect your systems from potential threats.

        - name: Prompt for user confirmation
          ansible.builtin.pause:
            prompt: "Please type 'yes' to confirm and continue or anything else to stop"
            echo: true
          register: user_input
          when: user_input is not defined

        - name: Check if the user confirms
          ansible.builtin.fail:
            msg: "User did not confirm. Stopping the playbook."
          when: user_input.user_input | lower != "yes"
      run_once: true

    - name: Assert that VOIP_VIDEO_RAM is an integer and has value between 256 and 3584
      ansible.builtin.assert:
        that:
          - VOIP_VIDEO_RAM is integer
          - VOIP_VIDEO_RAM|int <= 3584
          - VOIP_VIDEO_RAM|int >= 256
        msg: >-
          Please make sure that VOIP_VIDEO_RAM is an unquoted integer and the value is between 256 and 3584
      run_once: true
      when: VOIP_VIDEO_RAM is defined

    - name: Ensure allow_tcp_forwarding is set to yes or no when enabled
      ansible.builtin.assert:
        that:
          - allow_tcp_forwarding is string
          - allow_tcp_forwarding is in ['yes', 'no']
        msg: >-
          Ensure value from allow_tcp_forwarding is set to lower quoted yes or no when enabled
      run_once: true
      when:
        - allow_tcp_forwarding is defined
    - name: Assert enable_tls_mysql is valid
      ansible.builtin.assert:
        that:
          - enable_tls_mysql is string
          - enable_tls_mysql | lower is in ['true', 'false']
        msg: >-
          Invalid value for configuration option `enable_tls_mysql`.
          Please ensure your value is quoted and is either "true" or "false".
      run_once: true
      when: enable_tls_mysql is defined

    - name: Check if enable_tls_mysql has all required values and can be enabled on the environment
      block:
        - name: Assert that all conditions for enable_tls_mysql are set
          ansible.builtin.assert:
            that:
              - mysql_host is undefined
              - oracle_host is undefined
              - ssl_server_certificate is defined
              - ssl_intermediate_certificate is defined
              - ssl_root_certificate is defined
              - ssl_keyfile is defined
            msg:
              - "Please ensure that you are using the mysql installation from the playbooks and no external host."
              - "Please make sure that you are using a valid ssl certificate."
          run_once: true
          when:
            - groups['all'] | length() > 1

        - name: Get SSL Certificate purpose
          ansible.builtin.shell: "openssl x509 -noout -in {{ ssl_server_certificate }} -purpose | grep 'SSL client :' | cut -d ' ' -f4"
          register: ssl_server_certificate_purpose
          changed_when: false
          when:
            - groups['all'] | length() > 1

        - name: Check SSL Certificate purpose
          ansible.builtin.assert:
            that:
              - hostvars[groups['management_servers'][0]].ssl_server_certificate_purpose.stdout == "Yes"
            msg:
              - "To use enable_tls_mysql you have to ensure that your Certificate can also be used as a Client certificate."
              - "You can check which purposes are supported for you Certificate with following command."
              - "The purpose 'SSL client' has to be 'Yes'"
              - "    openssl x509 -noout -in {{ ssl_server_certificate }} -purpose"
          run_once: true
          when:
            - ssl_server_certificate_purpose is defined
            - ssl_server_certificate_purpose is not skipped

        - name: Assert if mysql_tls_admin_enabled is valid
          ansible.builtin.assert:
            that:
              - mysql_tls_admin_enabled is string
              - mysql_tls_admin_enabled | lower is in ['true', 'false']
            msg: >-
              Invalid value for configuration option `mysql_tls_admin_enabled`.
              Please ensure your value is quoted and is either "true" or "false".
          run_once: true
          when:
            - mysql_tls_admin_enabled is defined
            - groups['all'] | length() > 1

      when:
        - enable_tls_mysql is defined
        - enable_tls_mysql | lower == "true"

    - name: Ensure valid configuration combination
      block:
        - name: Retrieve name of playbook file
          ansible.builtin.set_fact:
            playbook_name: "{{ (lookup('file', '/proc/self/cmdline') | regex_replace('\u0000', ' ')).split() | select('match', '^[a-z-_/]*[.]y[a]*ml') | list | first | basename }}"

        # Checks if in single set-up
        - name: Check if installation is single
          ansible.builtin.set_fact:
            installation_type: single
          delegate_facts: true
          run_once: true
          when:
            - groups['all'] | length() == 1
            - inventory_file | basename == "hosts"

        # Checks if in cluster set-up
        - name: Check if installation is cluster
          ansible.builtin.set_fact:
            installation_type: cluster
          delegate_facts: true
          run_once: true
          when:
            - groups['all'] | length() > 1
            - inventory_file | basename == "cluster_hosts"

        # Finds all procedure plays in the relevant directory and against the yaml pattern only. This will also add our standard playbooks to the whitelist.
        - name: Whitelist permitted playbooks
          ansible.builtin.set_fact:
            permitted_playbooks: "{{ query('fileglob', '{{ inventory_dir }}/playbooks/procedures/*.yml') | map('basename') | list }} + 'site.yml' + 'cluster.yml'"

        # An asserstion is made to ensure a valid configuration. This doesn't perform a configuration check if in Developer mode.
        - name: Verify the configuration is valid
          ansible.builtin.assert:
            that:
              - "'installation_type' is defined"
              - "playbook_name in permitted_playbooks"
            msg:
              - "WARNING: Incorrect configuration detected. Please ensure you are using the correct inventory file, playbook and variable config file."
              - "If you encounter any problems or have any concerns, please contact support@teamwire.eu"
      when:
        - not tw_dev_mode
        - packer_build_name is not defined
        - vagrant_mode is not defined

    - name: Ensure valid management server configuration
      ansible.builtin.assert:
        that:
          - "'management_servers' in groups"
          - groups['management_servers'] | length > 0
        msg:
          - "WARNING: No management servers have been defined."
          - "Management servers (group: management_servers), is a new management server group which you'll run twctl and Ansible provisions from."
          - "WARNING: You must ensure all the relevant certificates, cluster_hosts and group_vars/all files are moved/adapted to the assigned management servers before proceeding."
          - "You should also ensure the Vault token is in place at /root/.vault-token and /home/teamwire/.vault-token."
          - "You must ensure at least 1 management server is defined in cluster_hosts, please check cluster_example_hosts for a reference."
          - "If you encounter any problems or have any concerns, please contact support@teamwire.eu"
      run_once: true
      when: groups['all'] | length() > 1

    - name: Ensure valid Hashi server group configuration
      ansible.builtin.assert:
        that:
          - "'hashi_servers' in groups"
          - "'consul_servers' not in groups"
        msg:
          - "WARNING: Please ensure the hashi_servers group has been defined in the cluster_hosts file and the consul_servers group no longer exists."
          - "The consul_servers group has been renamed to hashi_servers."
          - "Please refer to the cluster_example_hosts file for an example."
      run_once: true
      when: groups['all'] | length() > 1

    - name: Ensure valid Storage server group configuration
      ansible.builtin.assert:
        that:
          - "'nfs_servers' not in groups"
        msg:
          - "WARNING: Please ensure the storage_servers group has been defined in the cluster_hosts file and the nfs_servers group no longer exists."
          - "The nfs_servers group has been renamed to storage_servers."
          - "Please refer to the cluster_example_hosts file for an example."
      run_once: true
      when: groups['all'] | length() > 1

    - name: Ensure APNS certificate path exists.
      ansible.builtin.assert:
        that:
          - apns_certificate is exists
        msg: >-
          Please ensure the APNS certificate path is correct.
      when: apns_certificate is defined
      run_once: true
      delegate_to: localhost

# ------------------------------------------------------------------------------
# Check mail requirements
# ------------------------------------------------------------------------------
    - name: Fail if system_email_recipient is not defined
      ansible.builtin.fail:
        msg: The Variable 'system_email_recipient' must be defined in group_vars/all
      when:
        - config_done is defined
        - system_email_recipient is not defined
        - use_nullmailer is defined
        - use_nullmailer | lower == "true"

    - name: Get current git tag
      ansible.builtin.command: "git describe --always --tags" # noqa command-instead-of-module
      args:
        chdir: "{{ inventory_dir if inventory_dir is defined else (ansible_inventory_sources[0] | dirname) }}"
      register: current_local_tag_var
      when: packer_build_name is not defined
      delegate_to: localhost
      become: false
      run_once: true
      check_mode: false

    - name: Set fact current_local_tag
      ansible.builtin.set_fact:
        current_local_tag: "{{ current_local_tag_var.stdout }}"
      when: packer_build_name is not defined

    - name: Set current git tag (incomplete) in /etc/platform_version
      ansible.builtin.copy:
        dest: /etc/platform_version
        content: '{{ current_local_tag if current_local_tag is defined else "NONE" }}(incomplete)'
        owner: root
        group: root
        mode: 0644
      when: packer_build_name is not defined
##### END ######

- name: Vault Status check
  hosts: local:hashi_servers
  tasks:
    - name: Include single installation role
      ansible.builtin.include_role: # Single only
        name: ../roles/vault
        tasks_from: secrets
      when:
        - ansible_local.vault is defined
        - ansible_local.vault.initialized == "true"
        - secrets_read is not defined
        - groups['all'] | length() == 1

    - name: Include cluster installation role
      ansible.builtin.include_role: # Cluster only
        name: ../roles/vault
        tasks_from: secrets
      when:
        - ansible_local.vault is defined
        - ansible_local.vault.initialized == "true"
        - secrets_read is not defined
        - groups['all'] | length() > 1

- name: Check requirements for control host
  hosts: 127.0.0.1
  connection: local
  become: false
  tasks:
    - name: Check for deprecated variables
      block:
        - name: Check for deprecated variables
          ansible.builtin.fail:
            msg:
              - "WARNING: The variable ssl_certfile is deprecated and will not work in future releases."
        - name: Pause 5 seconds
          ansible.builtin.pause:
            seconds: 5
      ignore_errors: true # noqa ignore-errors
      when:
        - ssl_certfile is defined
        - config_done is defined

    - name: Register cert subject organization
      ansible.builtin.shell: openssl x509 -in {{ ssl_certfile if ssl_certfile is defined else ssl_server_certificate }} -subject -noout | grep -Po 'O = .*,' | sed 's/. OU.*//' | sed 's/O = //' # noqa risky-shell-pipe
      register: cert_subject_org
      when:
        - packer_build_name is not defined
        - config_done is defined
        - (ssl_certfile is defined or ssl_server_certificate is defined)

    - name: Register cert issuer organization
      ansible.builtin.shell: openssl x509 -in {{ ssl_certfile if ssl_certfile is defined else ssl_server_certificate }} -issuer -noout | grep -Po 'O = .*,' | sed 's/O = //' | sed 's/,//' # noqa risky-shell-pipe
      register: cert_issuer_org
      when:
        - packer_build_name is not defined
        - config_done is defined
        - (ssl_certfile is defined or ssl_server_certificate is defined)

    - name: Check if Certificate is self signed
      block:
        - name: Check if Certificate is self signed
          ansible.builtin.fail:
            msg: "Self signed certificates are not supported. We cannot provide warranty or support for this installation."
        - name: Pause 5 seconds
          ansible.builtin.pause:
            seconds: 5
      ignore_errors: true # noqa ignore-errors
      when:
        - cert_subject_org.stdout is defined
        - cert_issuer_org.stdout is defined
        - cert_subject_org.stdout == cert_issuer_org.stdout

- name: Perform SSL-Preflight check
  hosts: 127.0.0.1
  connection: local
  tasks:
    - name: Perform SSL-Preflight check
      ansible.builtin.include_tasks: ../roles/frontend/tasks/ssl-check.yml
      vars:
        ssl_first_check: true
      when: packer_build_name is not defined
  become: false
  run_once: true

- name: Check APNS certificate validity
  hosts: all
  tasks:
    - name: Check APNS certificate validity
      block:
        - name: Check APNS certificate validity
          community.crypto.x509_certificate_info:
            path: "{{ apns_certificate }}"
            valid_at:
              next_month: "+30d"
          register: __apns_certificate_validity
        - name: Assert APNS certificate doesn't expire within the next month
          ansible.builtin.assert:
            that:
              - __apns_certificate_validity.valid_at.next_month
      rescue:
        - name: Check APNS certificate validity
          ansible.builtin.debug:
            msg: 'Please change your APNS-Certificate immediately or remove the Certificate from the group_vars/all File'
      when:
        - config_done is defined
        - apns_certificate is defined
      run_once: true
      delegate_to: localhost
      become: false

    - name: Ensure the secondary APNS certificate is configured correctly
      ansible.builtin.fail:
        msg: "The secondary APNS certificate is not configured correctly."
      when:
        - apns_certificate_2 is defined
        - apns_appid_2 is not defined or apns_appid_2 is defined
        - apns_certificate_2 is not defined

    - name: Check secondary APNS certificate validity
      block:
        - name: Check secondary APNS certificate validity
          community.crypto.x509_certificate_info:
            path: "{{ apns_certificate_2 }}"
            valid_at:
              next_month: "+30d"
          register: __apns_certificate_validity
        - name: Assert secondary APNS certificate doesn't expire within the next month
          ansible.builtin.assert:
            that:
              - __apns_certificate_validity.valid_at.next_month
      rescue:
        - name: Check secondary APNS certificate validity
          ansible.builtin.debug:
            msg: 'Please change your secondary APNS-Certificate immediately or remove the Certificate from the group_vars/all File'
      when:
        - config_done is defined
        - apns_certificate_2 is defined
      run_once: true
      delegate_to: localhost
      become: false

    - name: Ensure the tertiary APNS certificate is configured correctly
      ansible.builtin.fail:
        msg: "The tertiary APNS certificate is not configured correctly."
      when:
        - apns_certificate_3 is defined
        - apns_appid_3 is not defined or apns_appid_3 is defined
        - apns_certificate_3 is not defined

    - name: Check tertiary APNS certificate validity
      block:
        - name: Check tertiary APNS certificate validity
          community.crypto.x509_certificate_info:
            path: "{{ apns_certificate_3 }}"
            valid_at:
              next_month: "+30d"
          register: __apns_certificate_validity
        - name: Assert tertiary APNS certificate doesn't expire within the next month
          ansible.builtin.assert:
            that:
              - __apns_certificate_validity.valid_at.next_month
      rescue:
        - name: Check tertiary APNS certificate validity
          ansible.builtin.debug:
            msg: 'Please change your tertiary APNS-Certificate immediately or remove the Certificate from the group_vars/all File'
      when:
        - config_done is defined
        - apns_certificate_3 is defined
      run_once: true
      delegate_to: localhost
      become: false

    # Check for unattended-upgrades
    - name: Wait for automatic system updates to complete
      ansible.builtin.shell: while pgrep /usr/bin/unattended-upgrade; do sleep 1; done; # noqa no-changed-when

# ------------------------------------------------------------------------------
# Notifications for Single Host
# ------------------------------------------------------------------------------
- name: Check if enable_tls_mysql needs a notification Single
  hosts: local
  tasks:

    - name: Check if enable_tls_mysql is set for single host
      ansible.builtin.debug:
        msg:
          - "You have set the value enable_tls_mysql to 'true' but you are running a single host environment."
          - "Please note that this value will not have any effect in this environment."
      when:
        - groups['all'] | length() == 1
        - enable_tls_mysql is defined
        - enable_tls_mysql | lower == "true"

# ------------------------------------------------------------------------------
# Notifications for Cluster
# ------------------------------------------------------------------------------
- name: Run tasks on the first database server
  hosts: "{{ groups['database_servers'] | sort | first if groups['database_servers'] is defined and groups['database_servers'] | length > 0 else 'localhost' }}"
  tasks:
    - name: Gather installed packages
      ansible.builtin.package_facts:
        manager: auto
      when:
        - groups['all'] | length() > 1

    - name: Check if cluster environment needs notifications
      block:
        - name: Check if galera cluster is already initialized
          community.mysql.mysql_query:
            query: "SHOW STATUS LIKE 'wsrep_cluster_size'"
            login_user: root
            login_password: "{{ mysql_root_password }}"
          register: show_galera_cluster_size

        - name: Set fact if galera cluster is initialized
          ansible.builtin.set_fact:
            galera_cluster_init: "defined"
          with_items: "{{ show_galera_cluster_size.query_result }}"
          when:
            - item.Value != "0"

        - name: Check the state of ssl the running mysql server
          community.mysql.mysql_query:
            query: "SHOW VARIABLES LIKE 'have_ssl'"
            login_user: root
            login_password: "{{ mysql_root_password }}"
          register: mysql_have_ssl

        - name: Notification for enable_tls_mysql = true
          ansible.builtin.debug:
            msg:
              - "You've enabled enable_tls_mysql group variable to true. However, as your"
              - "cluster is currently running, to apply this change, you will need to first stop and then restart the database cluster."
              - "To do that, After the playbook execution finishes, execute this command to implement the TLS changes and restart"
              - "the database cluster. Before executing the playbook, please verify that no users are accessing the database."
              - "Restart database cluster command:"
              - "    ansible-playbook -i {{ 'hosts' if teamwire_platform_dir is defined else 'cluster_hosts' }} {{ 'platform/ansible/' if teamwire_platform_dir is defined }}playbooks/procedures/restart-galera-cluster.yml"
          with_items: "{{ mysql_have_ssl.query_result }}"
          when:
            - enable_tls_mysql is defined
            - enable_tls_mysql | lower == "true"
            - item.Value | lower == "disabled"
            - galera_cluster_init is defined
          register: enable_tls_mysql_true_notify

        - name: Notification for enable_tls_mysql = false
          ansible.builtin.debug:
            msg:
              - "You disabled the tls connection for mysql. To apply this change please execute following procedure:"
              - "    ansible-playbook -i {{ 'hosts' if teamwire_platform_dir is defined else 'cluster_hosts' }} {{ 'platform/ansible/' if teamwire_platform_dir is defined }}playbooks/procedures/restart-galera-cluster.yml"
          with_items: "{{ mysql_have_ssl.query_result }}"
          when:
            - enable_tls_mysql is undefined or enable_tls_mysql | lower != "true"
            - item.Value | lower == "yes"
            - galera_cluster_init is defined
          register: enable_tls_mysql_false_notify

        - name: Interrupt play so that the message can be understood
          ansible.builtin.pause:
            prompt: "Please read the Information from the task above this. If you want to continue please press [ENTER]"
          when:
            - enable_tls_mysql_true_notify is not skipped or enable_tls_mysql_false_notify is not skipped
      when:
        - groups['all'] | length() > 1
        - "'mariadb-server' in ansible_facts.packages"
