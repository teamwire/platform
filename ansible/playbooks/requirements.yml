---
##### THIS HAS TO GO FIRST #####
- name: Check Ansible version
  hosts: 127.0.0.1
  connection: local
  become: false
  vars_files: ../roles/common/vars/main.yml
  tasks:
    - name: Check Ansible version
      ansible.builtin.assert:
        that: "ansible_version.full is version_compare('{{ required_ansible_version }}', '==')"
        fail_msg:
          - Ansible {{ required_ansible_version }} is required.
          - Please run the Platform 3.0 upgrade preparation script.
          - If running a single-server setup, run "ansible-playbook -i hosts playbooks/procedures/upgrade-v3.yml"
          - If running a clustered-server setup, run "ansible-playbook -i cluster_hosts playbooks/procedures/upgrade-v3.yml"
        success_msg: Ansible {{ ansible_version.full }} matches expected version.

- name: Check overall requirements
  hosts: all
  tasks:
    - name: Ensure config_done is not set during Packer image builds
      ansible.builtin.fail:
        msg:
          - "The config_done variable is defined, this cannot be present during packer builds."
          - "Please ensure there is no group_vars/all configuration file in place."
      when:
        - packer_build_name is defined
        - config_done is defined

    - name: Ensure config_done is defined on cluster setups
      ansible.builtin.fail:
        msg:
          - "The config_done variable is not defined."
          - "Please ensure there is a group_vars/all configuration file in place and config_done is set to true."
      when:
        - groups['all'] | length() > 1
        - config_done is not defined

    - name: Ensure a proper backend version has been set
      ansible.builtin.fail:
        msg:
          - "ERROR: group_vars/all => version: '{{ version if version is defined else 'not set' }}'."
          - "Please set a valid backend version in group_vars/all variable 'version'"
          - "To display the latest valid backend versions, please run twctl show-tags"
      when:
        - packer_build_name is not defined
        - vagrant_mode is not defined
        - (version is not defined or version | lower == "prod" or version == None or version | length == 0)

    - name: Check if in developer mode
      ansible.builtin.set_fact:
        TW_DEV_MODE: "{{ lookup('env', 'TW_DEV_MODE') | ternary(True, False) }}"
      delegate_facts: true
      run_once: true

    - name: Assert use_teamwire_registry is valid
      ansible.builtin.assert:
        that:
          - use_teamwire_registry is string
          - use_teamwire_registry | lower is in ['true', 'false']
        msg: >-
          Invalid value for configuration option `use_teamwire_registry`.
          Please ensure your value is enquoted and is either 'true' or 'false'.
      run_once: true
      when: use_teamwire_registry is defined

    - name: Assert workers variable is valid.
      ansible.builtin.assert:
        that:
          - workers is string and workers|int
        msg: >-
          Invalid value for configuration option `workers`.
          Please ensure your value is quoted and is a string of numbers.
      run_once: true
      when: workers is defined

    - name: Assert that worker_gunicorn_max_requests is an integer
      ansible.builtin.assert:
        that:
          - worker_gunicorn_max_requests is integer
        msg: >-
          Please make sure that worker_gunicorn_max_requests is an unquoted integer.
      run_once: true
      when: worker_gunicorn_max_requests is defined

    - name: Assert channel_group_expiry variable is valid.
      ansible.builtin.assert:
        that:
          - channel_group_expiry is string and channel_group_expiry|int
        msg: >-
          Invalid value for configuration option `channel_group_expiry`.
          Please ensure your value is quoted and is a string of numbers.
      run_once: true
      when: channel_group_expiry is defined

    - name: Assert that disable_gc_reconfiguration is true or false
      ansible.builtin.assert:
        that:
          - disable_gc_reconfiguration | lower in [ "true", "false" ]
        msg: >-
          Please make sure that disable_gc_reconfiguration is either "false" or "true".
      run_once: true
      when: disable_gc_reconfiguration is defined

    - name: Ensure voip_server group has only one member
      ansible.builtin.assert:
        that:
          - "groups['voip_servers'] is defined"
          - "groups['voip_servers'] | length == 1"
        msg: >-
          WARNING: It seems like the group voip_servers has none or more than one member.
            If you have enable_voip set to true you have to define a host in this group.
            If you have more than one host in this group. Please only define one server.
          Please refer to the cluster_example_hosts file for an example.
      run_once: true
      when:
        - enable_voip is defined
        - enable_voip | lower == "true"
        - groups['all'] | length() > 1
        - tw_environments is not defined

    - name: Ensure enable_voip is a string when enabled
      ansible.builtin.assert:
        that:
          - enable_voip is string
          - enable_voip is in ['true', 'false']
        msg: >-
          Ensure value from enable_voip is set to lower quoted true or false when enabled
      run_once: true
      when:
        - enable_voip is defined

    - name: Ensure enable_stun is a string when enabled
      ansible.builtin.assert:
        that:
          - enable_stun is string
          - enable_stun is in ['true', 'false']
        msg: >-
          Ensure value from enable_stun is set to lower quoted true or false when enabled
      run_once: true
      when:
        - enable_stun is defined

    - name: Ensure enable_jvb_cluster is a string when enabled
      ansible.builtin.assert:
        that:
          - enable_jvb_cluster is string
          - enable_jvb_cluster is in ['true', 'false']
        msg: >-
          Ensure value from enable_jvb_cluster is set to lower quoted true or false when enabled
      run_once: true
      when:
        - enable_jvb_cluster is defined

    - name: Ensure enable_voip is enabled when enable_stun is activated
      ansible.builtin.assert:
        that:
          - enable_voip is defined and enable_voip | lower == "true"
        msg: >-
          Ensure enable_voip is defined and value is set to quoted true
      run_once: true
      when:
        - enable_stun is defined
        - enable_stun | lower == "true"

    - name: Ensure enable_voip is set to true when enable_jvb_cluster is activated
      ansible.builtin.assert:
        that:
          - enable_voip is defined and enable_voip | lower == "true"
        msg: >-
          Ensure enable_voip is defined and value is set to quoted true
      run_once: true
      when:
        - enable_jvb_cluster is defined
        - enable_jvb_cluster | lower == "true"

    - name: Ensure that enable_jvb_cluster is not set on single server installation
      ansible.builtin.assert:
        that: enable_jvb_cluster is not defined
        msg: >-
          The option 'enable_jvb_cluster' can not be set in a single server installation.
          Ensure to remove the option from group_vars/all file.
      when:
        - groups['all'] | length() == 1

    - name: Ensure that stun_hostname is set only if enable_stun is also set to true
      ansible.builtin.assert:
        that:
          - enable_stun is defined
          - enable_stun | lower == "true"
          - stun_hostname is defined
          - stun_hostname is string
          - stun_hostname | length >= 1
        msg: >-
          Please ensure that the 'enable_stun' parameter is set to 'true' and that the 'stun_hostname' parameter is set to a resolvable hostname pointing to the public IP of the VoIP Server.
          Please note that the 'stun_hostname' should never be left empty.
      run_once: true
      when: enable_stun is defined or stun_hostname is defined

    - name: Ensure valid configuration combination
      block:
        - name: Retrieve name of playbook file
          ansible.builtin.set_fact:
            playbook_name: "{{ (lookup('file', '/proc/self/cmdline') | regex_replace('\u0000', ' ')).split() | select('match', '^[a-z-_/]*[.]y[a]*ml') | list | first | basename }}"

        # Checks if in single set-up
        - name: Check if installation is single
          ansible.builtin.set_fact:
            installation_type: single
          delegate_facts: true
          run_once: true
          when:
            - groups['all'] | length() == 1
            - inventory_file | basename == "hosts"

        # Checks if in cluster set-up
        - name: Check if installation is cluster
          ansible.builtin.set_fact:
            installation_type: cluster
          delegate_facts: true
          run_once: true
          when:
            - groups['all'] | length() > 1
            - inventory_file | basename == "cluster_hosts"

        # Finds all procedure plays in the relevant directory and against the yaml pattern only. This will also add our standard playbooks to the whitelist.
        - name: Whitelist permitted playbooks
          ansible.builtin.set_fact:
            permitted_playbooks: "{{ query('fileglob', '{{ inventory_dir }}/playbooks/procedures/*.yml') | map('basename') | list }} + 'site.yml' + 'cluster.yml'"

        # An asserstion is made to ensure a valid configuration. This doesn't perform a configuration check if in Developer mode.
        - name: Verify the configuration is valid
          ansible.builtin.assert:
            that:
              - "'installation_type' is defined"
              - "playbook_name in permitted_playbooks"
            msg:
              - "WARNING: Incorrect configuration detected. Please ensure you are using the correct inventory file, playbook and variable config file."
              - "If you encounter any problems or have any concerns, please contact support@teamwire.eu"
      when:
        - not TW_DEV_MODE
        - packer_build_name is not defined
        - vagrant_mode is not defined

    - name: Ensure valid management server configuration
      ansible.builtin.assert:
        that:
          - "'management_servers' in groups"
          - groups['management_servers'] | length > 0
        msg:
          - "WARNING: No management servers have been defined."
          - "Management servers (group: management_servers), is a new management server group which you'll run twctl and Ansible provisions from."
          - "WARNING: You must ensure all the relevant certificates, cluster_hosts and group_vars/all files are moved/adapted to the assigned management servers before proceeding."
          - "You should also ensure the Vault token is in place at /root/.vault-token and /home/teamwire/.vault-token."
          - "You must ensure at least 1 management server is defined in cluster_hosts, please check cluster_example_hosts for a reference."
          - "If you encounter any problems or have any concerns, please contact support@teamwire.eu"
      run_once: true
      when: groups['all'] | length() > 1

    - name: Ensure valid Hashi server group configuration
      ansible.builtin.assert:
        that:
          - "'hashi_servers' in groups"
          - "'consul_servers' not in groups"
        msg:
          - "WARNING: Please ensure the hashi_servers group has been defined in the cluster_hosts file and the consul_servers group no longer exists."
          - "The consul_servers group has been renamed to hashi_servers."
          - "Please refer to the cluster_example_hosts file for an example."
      run_once: true
      when: groups['all'] | length() > 1

    - name: Ensure valid Storage server group configuration
      ansible.builtin.assert:
        that:
          - "'nfs_servers' not in groups"
        msg:
          - "WARNING: Please ensure the storage_servers group has been defined in the cluster_hosts file and the nfs_servers group no longer exists."
          - "The nfs_servers group has been renamed to storage_servers."
          - "Please refer to the cluster_example_hosts file for an example."
      run_once: true
      when: groups['all'] | length() > 1

    - name: Ensure APNS certificate path exists.
      ansible.builtin.assert:
        that:
          - apns_certificate is exists
        msg: >-
          Please ensure the APNS certificate path is correct.
      when: apns_certificate is defined
      run_once: true
      delegate_to: localhost

    - name: Get current git tag
      ansible.builtin.command: "git describe --always --tags" # noqa command-instead-of-module
      args:
        chdir: "{{ inventory_dir if inventory_dir is defined else (ansible_inventory_sources[0] | dirname) }}"
      register: current_local_tag_var
      when: packer_build_name is not defined
      delegate_to: localhost
      become: false
      run_once: true
      check_mode: false

    - name: Set fact current_local_tag
      ansible.builtin.set_fact:
        current_local_tag: "{{ current_local_tag_var.stdout }}"
      when: packer_build_name is not defined

    - name: Set current git tag (incomplete) in /etc/platform_version
      ansible.builtin.copy:
        dest: /etc/platform_version
        content: '{{ current_local_tag if current_local_tag is defined else "NONE" }}(incomplete)'
        owner: root
        group: root
        mode: 0644
      when: packer_build_name is not defined
##### END ######

- name: Vault Status check
  hosts: local:hashi_servers
  tasks:
    - name: Include single installation role
      ansible.builtin.include_role: # Single only
        name: ../roles/vault
        tasks_from: secrets
      when:
        - ansible_local.vault is defined
        - ansible_local.vault.initialized == "true"
        - secrets_read is not defined
        - groups['all'] | length() == 1

    - name: Include cluster installation role
      ansible.builtin.include_role: # Cluster only
        name: ../roles/vault
        tasks_from: secrets
      when:
        - ansible_local.vault is defined
        - ansible_local.vault.initialized == "true"
        - secrets_read is not defined
        - groups['all'] | length() > 1

- name: Check requirements for control host
  hosts: 127.0.0.1
  connection: local
  become: false
  tasks:
    - name: Check for deprecated variables
      block:
        - name: Check for deprecated variables
          ansible.builtin.fail:
            msg:
              - "WARNING: The variable ssl_certfile is deprecated and will not work in future releases."
        - name: Pause 5 seconds
          ansible.builtin.pause:
            seconds: 5
      ignore_errors: true # noqa ignore-errors
      when:
        - ssl_certfile is defined
        - config_done is defined

    - name: Register cert subject organization
      ansible.builtin.shell: openssl x509 -in {{ ssl_certfile if ssl_certfile is defined else ssl_server_certificate }} -subject -noout | grep -Po 'O = .*,' | sed 's/. OU.*//' | sed 's/O = //' # noqa risky-shell-pipe
      register: cert_subject_org
      when:
        - packer_build_name is not defined
        - config_done is defined
        - (ssl_certfile is defined or ssl_server_certificate is defined)

    - name: Register cert issuer organization
      ansible.builtin.shell: openssl x509 -in {{ ssl_certfile if ssl_certfile is defined else ssl_server_certificate }} -issuer -noout | grep -Po 'O = .*,' | sed 's/O = //' | sed 's/,//' # noqa risky-shell-pipe
      register: cert_issuer_org
      when:
        - packer_build_name is not defined
        - config_done is defined
        - (ssl_certfile is defined or ssl_server_certificate is defined)

    - name: Check if Certificate is self signed
      block:
        - name: Check if Certificate is self signed
          ansible.builtin.fail:
            msg: "Self signed certificates are not supported. We cannot provide warranty or support for this installation."
        - name: Pause 5 seconds
          ansible.builtin.pause:
            seconds: 5
      ignore_errors: true # noqa ignore-errors
      when:
        - cert_subject_org.stdout is defined
        - cert_issuer_org.stdout is defined
        - cert_subject_org.stdout == cert_issuer_org.stdout

- name: Check if installing offline
  hosts: all
  tasks:
    - name: Check if offline file is present
      ansible.builtin.stat:
        path: /etc/offline_installation
      register: offline_mode
      run_once: true

- name: Perform SSL-Preflight check
  hosts: 127.0.0.1
  connection: local
  tasks:
    - name: Perform SSL-Preflight check
      ansible.builtin.include_tasks: ../roles/frontend/tasks/ssl-check.yml
      vars:
        ssl_first_check: true
      when: packer_build_name is not defined
  become: false
  run_once: true

- name: Check APNS certificate validity
  hosts: all
  tasks:
    - name: Check APNS certificate validity
      block:
        - name: Check APNS certificate validity
          community.crypto.x509_certificate_info:
            path: "{{ apns_certificate }}"
            valid_at:
              next_month: "+30d"
          register: __apns_certificate_validity
        - name: Assert APNS certificate doesn't expire within the next month
          ansible.builtin.assert:
            that:
              - __apns_certificate_validity.valid_at.next_month
      rescue:
        - name: Check APNS certificate validity
          ansible.builtin.debug:
            msg: 'Please change your APNS-Certificate immediately or remove the Certificate from the group_vars/all File'
      when:
        - config_done is defined
        - apns_certificate is defined
      run_once: true
      delegate_to: localhost
      become: false

    - name: Ensure the secondary APNS certificate is configured correctly
      ansible.builtin.fail:
        msg: "The secondary APNS certificate is not configured correctly."
      when:
        - apns_certificate_2 is defined
        - apns_appid_2 is not defined or apns_appid_2 is defined
        - apns_certificate_2 is not defined

    - name: Check secondary APNS certificate validity
      block:
        - name: Check secondary APNS certificate validity
          community.crypto.x509_certificate_info:
            path: "{{ apns_certificate_2 }}"
            valid_at:
              next_month: "+30d"
          register: __apns_certificate_validity
        - name: Assert secondary APNS certificate doesn't expire within the next month
          ansible.builtin.assert:
            that:
              - __apns_certificate_validity.valid_at.next_month
      rescue:
        - name: Check secondary APNS certificate validity
          ansible.builtin.debug:
            msg: 'Please change your secondary APNS-Certificate immediately or remove the Certificate from the group_vars/all File'
      when:
        - config_done is defined
        - apns_certificate_2 is defined
      run_once: true
      delegate_to: localhost
      become: false

    - name: Ensure the tertiary APNS certificate is configured correctly
      ansible.builtin.fail:
        msg: "The tertiary APNS certificate is not configured correctly."
      when:
        - apns_certificate_3 is defined
        - apns_appid_3 is not defined or apns_appid_3 is defined
        - apns_certificate_3 is not defined

    - name: Check tertiary APNS certificate validity
      block:
        - name: Check tertiary APNS certificate validity
          community.crypto.x509_certificate_info:
            path: "{{ apns_certificate_3 }}"
            valid_at:
              next_month: "+30d"
          register: __apns_certificate_validity
        - name: Assert tertiary APNS certificate doesn't expire within the next month
          ansible.builtin.assert:
            that:
              - __apns_certificate_validity.valid_at.next_month
      rescue:
        - name: Check tertiary APNS certificate validity
          ansible.builtin.debug:
            msg: 'Please change your tertiary APNS-Certificate immediately or remove the Certificate from the group_vars/all File'
      when:
        - config_done is defined
        - apns_certificate_3 is defined
      run_once: true
      delegate_to: localhost
      become: false

    # Check for unattended-upgrades
    - name: Wait for automatic system updates to complete
      ansible.builtin.shell: while pgrep /usr/bin/unattended-upgrade; do sleep 1; done; # noqa no-changed-when
