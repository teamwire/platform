---
# This task will check if Vault has been initialized and read the secrets from there if so
- name: Vault Status check
  hosts: hashi_servers
  tasks:
    - name: Include roles
      ansible.builtin.include_role:
        name: "{{ teamwire_platform_dir if teamwire_platform_dir is defined else (ansible_inventory_sources[0] | dirname) }}/roles/vault"
        tasks_from: secrets
      when:
        - ansible_local.vault is defined
        - ansible_local.vault.initialized == "true"

- name: Setup galera cluster
  hosts: database_servers
  tasks:
    - name: Assert Setup
      ansible.builtin.assert:
        that:
          - groups['all'] | length() > 1
          - mysql_host is undefined
          - oracle_host is undefined
        msg:
          - "You can only bootstrap galera if your setup hits following requirement:"
          - "  - It is a cluster setup"
          - "  - It uses the mysql cluster installation from our Ansible Playbooks"
      run_once: true

    - name: Check if galera cluster is already initialized
      community.mysql.mysql_query:
        query: "SHOW STATUS LIKE 'wsrep_cluster_size'"
        login_user: root
        login_unix_socket: /var/run/mysqld/mysqld.sock
      when: inventory_hostname == groups['database_servers'] | sort | first
      register: show_galera_cluster_size

    - name: Check if galera is already initialized
      ansible.builtin.assert:
        that:
          - item.Value == "0"
        msg: "Your galera cluster is already initialized. Please carry on with the setup process."
      with_items: "{{ hostvars[groups['database_servers'][0]].show_galera_cluster_size.query_result }}"
      run_once: true

    - name: Stop MySQL on all cluster nodes
      ansible.builtin.service:
        name: mysql
        state: stopped

    - name: Fetch debian.cnf from first master
      ansible.builtin.fetch:
        src: /etc/mysql/debian.cnf
        dest: debian.cnf
        flat: true
      when:
        - inventory_hostname == groups['database_servers'] | sort | first

    - name: Copy debian.conf to other masters
      ansible.builtin.copy:
        src: debian.cnf
        dest: /etc/mysql/debian.cnf
        owner: root
        group: root
        mode: '600'
      when:
        - inventory_hostname != groups['database_servers'] | sort | first

    - name: Bootstrap database on first master
      ansible.builtin.command: /usr/bin/galera_new_cluster
      when:
        - inventory_hostname == groups['database_servers'] | sort | first

    - name: Delete root@first master user
      community.mysql.mysql_user:
        name: root
        host: "{{ inventory_hostname }}"
        state: absent
        login_user: root
        login_unix_socket: /var/run/mysqld/mysqld.sock
      when:
        - inventory_hostname == groups['database_servers'] | sort | first

    - name: Start service normally on other masters
      ansible.builtin.service:
        name: mysql
        state: started
      when:
        - inventory_hostname != groups['database_servers'] | sort | first
