---

# Teamwire Platform 3.0 upgrade procedure
#
- name: Update Python and Ansible
  hosts: all
  vars_files: ../../roles/common/vars/main.yml

  pre_tasks:
    - name: Teamwire Platform 3.0 upgrade.
      ansible.builtin.debug:
        msg:
          - It will determine if your system meets the requirements
          - and reconfigure it accordingly to be able to apply
          - Teamwire Platform 3.0.

    - name: Assert current Debian version is supported
      ansible.builtin.assert:
        that:
          - ansible_distribution_release == 'bullseye' or
            ansible_distribution_release == 'bookworm'
        fail_msg: You're using Debian {{ debian_version }}. Only Debian 11 (Bullseye) and 12 (Bookworm) are supported.
        success_msg: Debian {{ debian_version }} is supported.
      vars:
        debian_version: "{{ ansible_distribution_version }} ({{ ansible_distribution_release | capitalize }})"

    - name: Check platform installation status
      ansible.builtin.stat:
        path: /etc/platform_version
      register: platform_version_file

    - name: Determine applied platform version
      block:
        - name: Gather applied platform information
          ansible.builtin.slurp:
            src: /etc/platform_version
          register: platform_version_applied

        - name: Determine applied platform version
          ansible.builtin.set_fact:
            # Content in /etc/platform_version could look like the following examples
            # We're interested in the x.y.z version number only
            # 1.18
            # 1.18(incomplete)
            # 1.21-33-g62419ec(incomplete)
            platform_version_applied: "{{ platform_version_content | regex_search('(\\d+\\.\\d+(\\.\\d+)?).*', '\\1') | first }}"
            platform_version_is_incomplete: "{{ 'incomplete' in platform_version_content }}"
          vars:
            platform_version_content: "{{ platform_version_applied.content | b64decode | trim }}"

        - name: Assert previous platform version has been completely applied
          ansible.builtin.assert:
            that:
              - not platform_version_is_incomplete
            fail_msg:
              - Platform version {{ platform_version_applied }} hasn't been completely applied.
              - Please run 'git checkout tags/{{ platform_version_applied }}' to checkout the previous platform version.
            success_msg: Platform version {{ platform_version_applied }} is applied.

        - name: Assert at least platform version 2.4.1 is applied
          ansible.builtin.assert:
            that:
              - platform_version_applied is version(platform_v1_version_required, '>=')
            fail_msg:
              - Platform version {{ platform_version_applied }} is applied.
              - Platform version {{ platform_v1_version_required }} has to be applied in order to run this upgrade.
              - Please run 'git checkout tags/{{ platform_v1_version_required }}' to checkout the previous platform version.
            success_msg: Platform version {{ platform_version_applied }} can be upgraded to Platform 3.0.
          vars:
            platform_v1_version_required: '2.4.1'

        - name: Assert upgrade hasn't been run already
          ansible.builtin.assert:
            that:
              - platform_version_applied is version('3.0', '<')
            fail_msg: Upgrade has already been run. Nothing to do.
            success_msg: Upgrade hasn't been run yet.

      when: platform_version_file.stat.exists

    - name: Assert upgrade preparations haven't been run already
      ansible.builtin.assert:
        that:
          - ansible_version.full is version('2.14.6', '<')
        fail_msg: Upgrade preparations have already been run. Nothing to do.
        success_msg: Upgrade preparations haven't been run yet.

  tasks:
    - name: Display success message
      ansible.builtin.debug:
        msg:
          - Your system passed all checks.
          - Upgrade preparations start now.

    - name: Update Python and Ansible
      block:
        - name: Install Python 3
          ansible.builtin.apt:
            name:
              - python3
              - python3-setuptools
              - python3-wheel
              - python3-pip
            update_cache: true
        - name: Install Ansible
          ansible.builtin.pip:
            name:
              - pip==23.1.2
              - cryptography==3.4.8
              - ansible-core==2.14.6
              - ansible==7.6.0
          environment:
            HTTP_PROXY: "{{ http_proxy | default() }}"
            HTTPS_PROXY: "{{ http_proxy | default() }}"

    - name: Install twctl
      ansible.builtin.copy:
        src: "{{ inventory_dir }}/roles/management/files/twctl"
        dest: /usr/local/bin/twctl
        mode: 0755
        owner: root
        group: root

    - name: Display success message
      ansible.builtin.debug:
        msg: Upgrade preparations have been completed.
