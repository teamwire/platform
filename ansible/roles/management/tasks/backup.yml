- name: Create config backup directory
  file:
    path: /data/config_backups
    state: directory
    owner: teamwire
    group: teamwire
    mode: 0750
  run_once: true

- name: Create current configuration backup directory
  file:
    path: /data/config_backups/{{ ansible_date_time.iso8601 }}
    state: directory
    owner: teamwire
    group: teamwire
    mode: 0750
  register: backup_directory
  run_once: true
  check_mode: false

- name: Backup the configuration files
  copy:
    src: "{{ item }}"
    dest: "{{ backup_directory.path }}/"
  with_items:
    - "{{ inventory_dir }}/group_vars/all"
    - "{{ inventory_file }}"
  become: false
  run_once: true

- name: Backup SSL certificates and key
  copy:
    src: "{{ item }}"
    dest: "{{ backup_directory.path }}/"
  with_items:
    - "{{ ssl_certfile }}"
    - "{{ ssl_keyfile }}"
  when: ssl_certfile is defined and ssl_keyfile is defined
  become: false
  run_once: true

- name: Backup SSL certificates and key (OSCP style)
  copy:
    src: "{{ item }}"
    dest: "{{ backup_directory.path }}/"
  with_items:
    - "{{ ssl_server_certificate }}"
    - "{{ ssl_intermediate_certificate }}"
    - "{{ ssl_root_certificate }}"
    - "{{ ssl_keyfile }}"
  when:
    - ssl_server_certificate is defined
    - ssl_intermediate_certificate is defined
    - ssl_root_certificate is defined
    - ssl_keyfile is defined
  become: false
  run_once: true

- name: Backup APNS certificate
  copy:
    src: "{{ apns_certificate }}"
    dest: "{{ backup_directory.path }}/"
  when: apns_certificate is defined
  become: false
  run_once: true

- name: Backup secondary APNS certificate
  copy:
    src: "{{ apns_certificate_2 }}"
    dest: "{{ backup_directory.path }}/"
  when: apns_certificate_2 is defined
  become: false
  run_once: true

- name: Backup third APNS certificate
  copy:
    src: "{{ apns_certificate_3 }}"
    dest: "{{ backup_directory.path }}/"
  when: apns_certificate_3 is defined
  become: false
  run_once: true

- name: Check if Ansible log file exists
  ansible.builtin.stat:
    path: "{{ inventory_dir }}/ansible.log"
  register: log_file

- name: Backup Ansible log file
  command: mv {{ inventory_dir }}/ansible.log "{{ backup_directory.path }}/"
  when:
    - log_file.stat.exists
    - tw_dev_mode is undefined or tw_dev_mode | lower != "true"
  run_once: true