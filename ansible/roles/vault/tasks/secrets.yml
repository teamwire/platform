- name: Check Vault seal status
  ansible.builtin.fail:
    msg: "Vault is not in an unsealed state, please run 'twctl secrets unseal'."
  when: ansible_local.vault.sealed != "false"

- name: Load user-specified secrets
  ansible.builtin.set_fact:
    secrets: "{{ secrets | combine(user_secrets) }}"
  when: user_secrets is defined

- name: Set Vault token
  block:
    - name: Check for teamwire vault token file
      become: false
      ansible.builtin.stat:
        path: ~/.vault-token
      register: vault_token_file

    - name: Get Vault token from file
      become: false
      ansible.builtin.slurp:
        src: ~/.vault-token
      register: vault_token_file_input
      when: vault_token_file.stat.exists
      no_log: true

    - name: Set vault token as ansible fact
      ansible.builtin.set_fact:
        vault_token: "{{ vault_token_file_input.content | b64decode | trim if vault_token_file_input is not skipped else lookup('ansible.builtin.env', 'VAULT_TOKEN') }}"
  always:
    - name: Check token file exists and contains an entry
      ansible.builtin.fail:
        msg: "Vault token not found on {{ inventory_hostname }}, please ensure ~/.vault-token exists and contains your root token."
      when: vault_token is not defined or vault_token == ""
  run_once: true

- name: Read secrets
  block:
    - name: Read secrets
      ansible.builtin.uri:
        url: "{{ ansible_local.vault.address }}/v1/{{ item.value.path }}"
        headers:
          X-VAULT-TOKEN: "{{ vault_token }}"
        validate_certs: true
        body_format: json
      register: read
      with_dict:
        - "{{ secrets }}"
      no_log: true
      run_once: true
      check_mode: false
  rescue:
    # If a secret path not defined cause it is new implemented, then we are going to
    # write the secret path for every result that returned a status code 404
    - name: Write secret path for every result that returned a status code 404
      ansible.builtin.shell: >
        generated_secret=$(pwgen -s 32 1) &&
        vault write "{{ item.item.value.path }}" value=$generated_secret
      no_log: true
      with_items: "{{ read.results }}"
      when: item.status == 404
    # If the result status is not equal 404||200 then fail here
    - name: If the result status is not equal 404||200 then fail here
      ansible.builtin.fail:
        msg: "Read secrets failed!"
      no_log: true
      with_items: "{{ read.results }}"
      when: item.status != 404 and item.status != 200
    # Otherwise reread the new secrets into secrets var
    - name: Reread the new secrets into secrets var
      ansible.builtin.uri:
        url: "{{ ansible_local.vault.address }}/v1/{{ item.value.path }}"
        headers:
          X-VAULT-TOKEN: "{{ vault_token }}"
        validate_certs: true
        body_format: json
      register: read
      with_dict:
        - "{{ secrets }}"
      no_log: true
      run_once: true
      check_mode: false


- name: Set secret variables
  ansible.builtin.set_fact:
    "{{ item[1].item.key }}": "{{ item[1].json.data.value }}"
  no_log: true
  run_once: true
  delegate_facts: true
  delegate_to: "{{ item[0] }}"
  with_nested:
    - "{{ groups['all'] }}"
    - "{{ read.results }}"

- name: Set flag to confirm the secrets have been read from Vault
  ansible.builtin.set_fact:
    secrets_read: true
