---
- name: Check if Vault is already installed
  ansible.builtin.stat:
    path: /usr/local/bin/vault
  register: vault_binary

- name: Gather information about Vault
  block:
    - name: Gather information about Vault
      ansible.builtin.command: vault status
      register: vault_status
      failed_when: vault_status.rc == 1 or vault_status.rc >= 3
      changed_when: false
      environment:
        VAULT_ADDR: "{{ 'http' if ansible_local.vault is undefined or ansible_local.vault.initialized != 'true' else 'https' }}://127.0.0.1:8200"
    - name: Parse Vault information
      ansible.builtin.set_fact:
        vault_version_current: "{{ vault_status_version_line | regex_search('\\d+\\.\\d+\\.\\d+') }}"
        vault_ha_enabled: "{{ vault_status_ha_enabled_line | regex_search('(true|false)') | bool }}"
        # HA Mode is only displayed if Vault is unsealed
        # A sealed Vault is treated as 'standby'
        vault_ha_mode: "{{ 'standby' if vault_status_ha_mode_line | length == 0 else vault_status_ha_mode_line | first | regex_search('(standby|active)') }}"
      vars:
        vault_status_ha_enabled_line: "{{ vault_status.stdout_lines | select('match', '^HA Enabled.*$') | first }}"
        vault_status_ha_mode_line: "{{ vault_status.stdout_lines | select('match', '^HA Mode.*$') | list }}"
        vault_status_version_line: "{{ vault_status.stdout_lines | select('match', '^Version.*$') | first }}"
  when: vault_binary.stat.exists

# Some credentials shouldn't be stored as plain variables thus they're asked for interactively
# In case this role is executed outside of the overall Teamwire platform playbook
# they've already been asked at the very beginning
- name: Ask for additional information
  block:

    # If Vault will be updated it needs to be restarted and unsealed afterwards
    # Ask for two unseal keys to be able to unseal Vault automatically
    - name: Ask for unseal keys
      block:
        - name: Vault needs to be unsealed after upgrade
          ansible.builtin.pause:
            prompt: "Please provide first unseal key"
          register: pause_entry_01
          run_once: true
        - name: Vault needs to be unsealed after upgrade
          ansible.builtin.pause:
            prompt: "Please provide a second unseal key. Make sure it differs from the first key you've provided"
          register: pause_entry_02
          run_once: true
          when: pause_entry_01.user_input is defined
        - name: Verify unseal keys have been provided
          ansible.builtin.fail:
            msg: Unseal keys are required to upgrade Vault. Please ensure you've provided two different unseal keys.
          when: not pause_entry_01.user_input is defined or pause_entry_01.user_input == "" or not pause_entry_02.user_input is defined or pause_entry_02.user_input == "" or pause_entry_01.user_input == pause_entry_02.user_input
        - name: Save unseal keys
          ansible.builtin.set_fact:
            vault_unseal_keys: ["{{ pause_entry_01.user_input }}", "{{ pause_entry_02.user_input }}"]
          when:
            - pause_entry_01.user_input is defined
            - pause_entry_02.user_input is defined
      when:
        - ansible_local.vault is defined
        - ansible_local.vault.initialized == "true"
        - vault_binary.stat.exists
        - vault_version is version(vault_version_current, '>')

    - name: Ask for credentials
      block:
        - name: Ask for container registry password
          block:
            - name: Container registry password required
              ansible.builtin.pause:
                prompt: "Please enter the password for {{ dockerhub_username }}"
              register: pause_entry
              run_once: true
            - name: Save container registry password
              ansible.builtin.set_fact:
                dockerhub_password: "{{ pause_entry.user_input }}"
              when: pause_entry.user_input is defined
          when:
            - dockerhub_password is undefined
            - not ansible_local.offline_mode.stat.exists

        - name: Ask for SMTP authentication details
          block:
            - name: SMTP authentication
              ansible.builtin.pause:
                prompt: "Does your SMTP server require password authentication? (yes/no)"
              register: smtp_smartpass_required
              run_once: true
            - name: SMTP password required
              ansible.builtin.pause:
                prompt: "SMTP password required. Please enter the password for {{ smtp_smartuser }}"
              register: pause_entry
              run_once: true
              when:
                - smtp_smartpass_required.user_input is defined
                - ('yes' in smtp_smartpass_required|lower) or
                  ('y' in smtp_smartpass_required|lower)
            - name: Save SMTP password
              ansible.builtin.set_fact:
                smtp_smartpass: "{{ pause_entry.user_input }}"
              when: pause_entry.user_input is defined
          when: smtp_smartpass is undefined

        - name: Ask for external database password
          block:
            - name: Password required for external Teamwire database
              ansible.builtin.pause:
                prompt: "Please enter the password for {{ teamwire_db_user }}"
              register: pause_entry
              run_once: true
            - name: Save database password
              ansible.builtin.set_fact:
                teamwire_db_password: "{{ pause_entry.user_input }}"
              when: pause_entry.user_input is defined
          when: (mysql_host is defined and teamwire_db_password is undefined) or
                (oracle_host is defined and teamwire_db_password is undefined)

        - name: Ask for existing AES key
          block:
            - name: Use existing AES key
              ansible.builtin.pause:
                prompt: "Would you like to use an AES key from an existing installation? (yes/no)"
                echo: true
              register: aes_confirm
              run_once: true
            - name: Database AES key required
              ansible.builtin.pause:
                prompt: "Please enter the AES key from your previous installation"
              register: pause_entry
              run_once: true
              when:
                - aes_confirm.user_input is defined
                - ('yes' in aes_confirm|lower) or
                  ('y' in aes_confirm|lower)
            - name: Save AES key
              ansible.builtin.set_fact:
                aes_key: "{{ pause_entry.user_input }}"
              when: pause_entry.user_input is defined
          when: aes_key is undefined
      when: ansible_local.vault is undefined or ansible_local.vault.initialized != "true"

    - name: Remember that information have been asked for
      ansible.builtin.set_fact:
        vault_user_input_performed: true

  when: not vault_user_input_performed | default('no') | bool
