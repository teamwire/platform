---
- name: Install Redis Sentinel
  ansible.builtin.apt:
    name: redis-sentinel
    state: present

- name: Copy systemd unit files
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: /etc/systemd/system/
    mode: 0644
  with_items:
    - redis-server@.service
    - redis-sentinel@.service
  notify: Reload systemd

- name: Flush handlers
  ansible.builtin.meta: flush_handlers

- name: Stop and disable the default Redis services
  ansible.builtin.service:
    name: "{{ item }}"
    state: stopped
    enabled: false
  with_items:
    - redis-server
    - redis-sentinel
  register: disabled_redis_default_services

- name: Delete files created by the default Redis services
  ansible.builtin.file:
    name: "{{ item }}"
    state: absent
  with_items:
    - /var/log/redis/redis-server.log
    - /var/log/redis/redis-sentinel.log
    - /var/lib/redis/dump.rdb
  when: disabled_redis_default_services.changed # noqa no-handler

- name: Create Redis instance configuration files
  ansible.builtin.template:
    src: "{{ item[0] }}.conf.j2"
    dest: "/etc/redis/{{ item[0] }}-{{ item[1] }}.conf"
    owner: redis
    group: redis
    mode: 0640
    force: false
  with_nested:
    - ['redis', 'sentinel'] # noqa brackets
    - "{{ redis_instances }}"
  register: redis_configuration

- name: Ensure Redis runtime directory is created
  block:
    - name: Create systemd-tmpfiles configuration
      ansible.builtin.copy:
        src: redis.conf
        dest: /etc/tmpfiles.d/
        owner: root
        group: root
        mode: 0644
        directory_mode: 0755
      register: redis_systemd_tmpfiles_configuration

    # Re-apply new and/or changed systemd-tmpfiles configuration
    # https://www.freedesktop.org/software/systemd/man/systemd-tmpfiles-setup.service.html
    - name: Apply systemd-tmpfiles configuration
      ansible.builtin.command: /bin/systemd-tmpfiles --create --remove
      when: redis_systemd_tmpfiles_configuration.changed

- name: Start and enable Redis services
  ansible.builtin.service:
    name: "redis-{{ item[0] }}@{{ item[1] }}"
    state: started
    enabled: true
  with_nested:
    - ['server', 'sentinel'] # noqa brackets
    - "{{ redis_instances }}"

- name: Write Redis check scripts for each instance
  ansible.builtin.template:
    src: redis-check.j2
    dest: "/etc/consul.d/scripts/check-redis-{{ item }}.sh"
    mode: 0755
  with_items: "{{ redis_instances }}"

- name: Register Redis servers with Consul
  ansible.builtin.template:
    src: consul-redis.hcl.j2
    dest: "/etc/consul.d/redis-{{ item }}.hcl"
    owner: root
    group: root
    mode: 0644
  notify: Reload consul
  with_items: "{{ redis_instances }}"

- name: Register Redis sentinels with Consul
  ansible.builtin.template:
    src: consul-redis-sentinel.hcl.j2
    dest: "/etc/consul.d/redis-sentinel-{{ item }}.hcl"
    owner: root
    group: root
    mode: 0644
  notify: Reload consul
  with_items: "{{ redis_instances }}"

- name: Connect other Redis servers to first Redis server
  community.general.database.misc.redis:
    command: slave
    master_host: "{{ groups['redis_servers'] | first }}"
    master_port: "{{ redis_instances[item].server_port }}"
    login_port: "{{ redis_instances[item].server_port }}"
    login_password: "{{ redis_instances[item].password if redis_instances[item].password else omit }}"
  when: inventory_hostname != groups['redis_servers'] | first and redis_configuration.changed
  with_items: "{{ redis_instances }}"
