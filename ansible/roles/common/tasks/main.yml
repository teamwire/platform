---
- name: Configure proxy for apt
  when: 
  - http_proxy is defined
  - ENABLE_PROXY_FOR_APT == true
  template: src=apt.proxy.conf.j2 dest=/etc/apt/apt.conf.d/01proxy

- name: Remove apt proxy configuration when no proxy is configured
  when: ENABLE_PROXY_FOR_APT == false or http_proxy is not defined
  file: dest=/etc/apt/apt.conf.d/01proxy state=absent

# Installing dnsmasq is a chicken/egg problem: the apt cache must be updated
# before dnsmasq can be installed, but that is only possible with a working
# DNS configuration. Hence we write a temporary resolv.conf that gets
# overwritten as soon as dnsmasq is configured.
- name: Check if dnsmasq is already installed (cluster only)
  stat: path=/etc/dnsmasq.d/20-upstream
  register: dnsmasq_configuration
  when: '"hashi_servers" in groups'

- name: Configure DNS servers
  template: src=resolv.conf.j2 dest=/etc/resolv.conf
  when: dns_servers is defined and ("hashi_servers" not in groups or not dnsmasq_configuration.stat.exists)

- name: Create rc.local for Debian
  template:
    src: rc.local.j2
    dest: /etc/rc.local
    owner: root
    mode: 700

- name: Check if installing offline
  stat: path=/etc/offline_installation
  register: offline_mode

- name: apt-get update
  apt: update_cache=yes
  when: not offline_mode.stat.exists

  # Clusters: set up DNS with local dnsmasq
- name: Install dnsmasq (cluster only)
  include_tasks: dnsmasq.yml
  when: config_done is defined and "hashi_servers" in groups

# do security upgrades
- name: Install unattended-upgrades
  apt: pkg=unattended-upgrades state=present

- name: Mail root on unattended-upgrades
  lineinfile:
    dest: /etc/apt/apt.conf.d/50unattended-upgrades
    regexp: '^//Unattended-Upgrade::Mail "root";'
    line: 'Unattended-Upgrade::Mail "root";'
    backrefs: yes

- name: Configure unattended-upgrade
  copy:
    src: 02periodic
    dest: /etc/apt/apt.conf.d/02periodic
  when: config_done is defined and not offline_mode.stat.exists

- name: Automatically remove obsolete packages
  copy:
    src: apt-autoremove
    dest: /etc/cron.daily/apt-autoremove
    mode: 0755

- name: Install useful tools
  apt:
    name:
      - htop
      - sysstat
      - iotop
      - gnupg2
      - mc
      - zile
      - vim
      - nano
      - haveged
      - ldap-utils
      - bsd-mailx
      - unzip
      - patch
      - mlock
      - libcap2-bin
      - curl
      - jq
      - pwgen
      - dnsutils
      - tcpdump
      - sshpass
      - tshark

- name: Install pip
  apt:
    name:
      - python3-pip
      - python3-wheel
      - python3-setuptools
      - python3-docker

# # https://docs.ansible.com/ansible/latest/collections/community/general/alternatives_module.html
# - name: Update alternatives
#   community.general.alternatives:
#     name: python
#     link: /usr/bin/python
#     path: /usr/bin/{{ ansible_python.executable }}

- name: Remove unneeded packages
  apt:
    name: mlocate # sucks IO heavily
    state: absent
    purge: yes

# Configure system-wide proxy
- name: Enable system-wide proxy
  lineinfile:
    dest: /etc/environment
    line: "{{ item }}={{ http_proxy }}"
  with_items:
  - http_proxy
  - https_proxy
  when: http_proxy is defined

- name: Disable system-wide proxy when no proxy is configured
  lineinfile:
    dest: /etc/environment
    regexp: "^{{ item }}="
    state: absent
  with_items:
  - http_proxy
  - https_proxy
  - no_proxy
  when: http_proxy is not defined

- name: Don't access localhost and local services via proxy
  lineinfile:
    dest: /etc/environment
    line: "no_proxy=127.0.0.1,{{ groups['all'] | map('extract', hostvars, ['private_ip']) | join(',') }}{{ ',' + groups['all'] | join(',') + ',localhost,.consul' if groups['all']| length() > 1 else 'localhost' }}"
  when: http_proxy is defined

- name: Set hostname
  when: config_done is defined or inventory_hostname not in ignore_hostnames
  hostname: name="{{ inventory_hostname if inventory_hostname not in ignore_hostnames else (external_hostname[0] if external_hostname is iterable and external_hostname is not string else external_hostname) }}"

- name: Add hostname to localhost
  when: config_done is defined
  lineinfile:
    dest: /etc/hosts
    regexp: ^127\.0\.0\.1\s+localhost
    line: "127.0.0.1 localhost {{ external_hostname }}"

# send outgoing mail over smarthost
- include: postfix.yml

# install ntp and set timezone to UTC
- name: Set timezone to UTC
  copy: content="Etc/UTC\n" dest=/etc/timezone
  notify: update timezone

- name: Install the NTP daemon
  apt: pkg=ntp

- name: Enable and start the NTP daemon
  service: name=ntp state=started enabled=true

- name: Write NTP configuration file
  template: src=ntp.conf.j2 dest=/etc/ntp.conf
  notify: restart NTP

- name: Check that teamwire home dir exists
  stat: path=/home/teamwire
  register: teamwire_homedir

- name: Allow copy and paste in vim
  copy: src=vimrc dest=/home/teamwire/.vimrc owner=teamwire group=teamwire mode=0644
  when: teamwire_homedir.stat.exists

# general firewall rules
- name: Install the UFW firewall
  apt: pkg=ufw state=present

- name: Allow incoming SSH access
  ufw: rule=allow name=OpenSSH

- name: Configure default firewall policy
  ufw: state=enabled policy=reject

# TCP timestamps can be used to calculate server uptime
- name: Disable TCP timestamps
  sysctl:
    name: net.ipv4.tcp_timestamps
    value: "0"
    state: present
    reload: yes

# SSH
- name: Disable SSH password logins
  when: ssh_disable_passwords is defined and ssh_disable_passwords
  lineinfile:
    dest: /etc/ssh/sshd_config
    regexp: ^#?PasswordAuthentication
    line: "PasswordAuthentication no"
  notify: reload sshd

- name: Enable SSH password logins
  when: ssh_disable_passwords is not defined or not ssh_disable_passwords
  lineinfile:
    dest: /etc/ssh/sshd_config
    regexp: ^#?PasswordAuthentication
    line: "PasswordAuthentication yes"
  notify: reload sshd

- name: Disable DNS lookup on SSH login
  lineinfile:
    dest: /etc/ssh/sshd_config
    line: "UseDNS no"
  notify: reload sshd

# Prepare tmate usage
# It needs any ssh key for the calling user to function
- name: Create SSH keys for the teamwire user
  user: name=teamwire generate_ssh_key=yes
  when: config_done is defined

# Install tmate
- name: Install tmate
  apt: pkg=tmate

- name: Ensure rsyslog is installed
  apt: pkg=rsyslog

- name: Send all logs to loghost or remote syslog servers
  when: "'loghost' in groups or syslog_servers is defined"
  template:
    src: 30-remote-logging.conf.j2
    dest: /etc/rsyslog.d/30-remote-logging.conf
  notify:
    - restart rsyslog

- name: Create directory for custom facts
  file:
    path: /etc/ansible/facts.d
    state: directory
    recurse: yes

- name: Write Vault fact
  template:
    src: vault.fact.j2
    dest: /etc/ansible/facts.d/vault.fact
    mode: 0755
  register: vault_fact

- name: Reload Ansible local facts to register custom fact
  setup: filter=ansible_local
  when: vault_fact.changed

- include_tasks: cluster.yml
  when: groups['all'] | length() > 1 and (skip_private_if is not defined or skip_private_if)
