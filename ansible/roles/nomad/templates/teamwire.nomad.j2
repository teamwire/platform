job "teamwire" {
	# Specify the datacenters within the region this job can run in.
	datacenters = ["dc1"]

	# Priority controls our access to resources and scheduling priority.
	# This can be 1 to 100, inclusively, and defaults to 50.
	# priority = 50

	constraint {
		attribute = "${attr.kernel.name}"
		value = "linux"
	}

	# In general both constraint are not needed and one of both were sufficient,
	# but we might want to filter per instance in the future. A node class as
	# well the the ansible group could help us to filter even finer in the future.
	# Therefor we keep both "node.class" and "meta.groups".

	constraint {
		attribute = "${node.class}"
		value     = "backend_servers"
	}

	constraint {
		attribute = "${meta.groups}"
		operator = "regexp"
		value = "backend_servers"
	}

	# Configure the job to do rolling updates
	update {
		# Stagger updates every 10 seconds
		stagger = "10s"

		# Update a single task at a time
		max_parallel = 1
	}

	vault {
		policies = ["nomad-job"]
		change_mode = "restart"
	}

	group "backends" {
		count = {{ groups['backend_servers'] | count }}

		constraint {
			operator = "distinct_hosts"
			value = "true"
		}

		restart {
			interval = "5m"
			attempts = 10
			delay = "25s"
			mode = "delay"
		}

		network {
			mode = "host"
			port "http" {}
			port "ws" {
				static = "8083"
			}
		}

		task "backend" {
			driver = "docker"

			config {
				image = "{{ local_registry | default() }}{{ 'harbor.teamwire.eu/' if use_teamwire_registry | default('true') | bool }}teamwire/backend:{{ ansible_local.backend_version.tag }}"
				auth {
					username = "{{ docker_registry_username }}"
					password = "{{ docker_registry_password }}"
				}

				# Although group-level networking is set to "host"
				# Docker-specific networking setting is required
				# https://github.com/hashicorp/nomad/issues/8747
				network_mode = "host"

				logging {
					type = "syslog"
					config {
						tag = "teamwire-backend"
						syslog-facility = "local6"
					}
				}
				volumes = [
					"/data/archiving:/archiving",
					"/data/assets:/assets"{% if fcm_account_file is defined and fcm_account_file | length > 0 %},
					"/data/certs/fcm/customer.json:/certs/fcm/customer.json"
{%endif %}
				]
			}

			service {
				name = "${TASK}"
				tags = ["teamwire"]
				port = "http"
				check {
					type = "http"
					path = "/health"
					interval = "{{ nomad_health_backend_interval|default('15') }}s"
					timeout = "{{ nomald_health_backend_timeout|default('2') }}s"
				}
			}

			service {
				name = "${TASK}-websocket"
				tags = ["teamwire-websocket"]
				port = "ws"
			}

{% raw %}
			template {
				data = <<EOH
					AESKEY = "{{ with secret "secret/database/aes_key"}}{{.Data.value}}{{end}}"
{%- endraw %}{% if mysql_host is defined %}{%raw %}
					MYSQL_PASSWORD = "{{ with secret "secret/database/password"}}{{.Data.value}}{{end}}"
{%- endraw %}{%endif %}
{% if oracle_host is defined %}{%raw %}
					ORA_PASSWORD = "{{ with secret "secret/database/password"}}{{.Data.value}}{{end}}"
{%- endraw %}{%endif %}{% raw %}
					REDIS_PASSWORD = "{{ with secret "secret/redis/password"}}{{.Data.value}}{{end}}"
                                        JWT_APP_SECRET = "{{ with secret "secret/voip/jwt_app_secret" }}{{.Data.value}}{{end}}"
										PROSODY_KEY = "{{ with secret "secret/voip/prosody_key" }}{{.Data.value}}{{end}}"
				EOH
				destination = "secrets/file.env"
				env = true
			}
{% endraw %}
			env {
				ARCHIVING_CONFIG = "/archiving/archiving.conf"
				ARCHIVING_GPGHOME = "/archiving/gpg"
				VAULT_TOKEN = "{{ nomad_server_vault_token | default() }}"
				VAULT_ADDR = "https://vault.service.consul:8200"
				VAULT_AES_SECRET_PATH = "secret/database/aes_key"
				ORG_DEFAULT_ALLOW_USER_REG = "{{ allow_unknown_users|default('true') }}"
				ORG_DEFAULT_ALLOW_USER_QUERY = "{{ allow_user_query|default('false') }}"
				MYSQL_HOST = "{{ mysql_host | default() }}"
				MYSQL_PORT = "{{ mysql_port | default() }}"
				MYSQL_DATABASE = "{{ teamwire_db_name if mysql_host is defined else '' }}"
				MYSQL_USER = "{{ teamwire_db_user if mysql_host is defined else '' }}"
				ORA_HOST = "{{ oracle_host | default() }}"
				ORA_PORT = "{{ oracle_port | default() }}"
				ORA_DATABASE = "{{ teamwire_db_name if oracle_host is defined else '' }}"
				ORA_USER = "{{ teamwire_db_user if oracle_host is defined else '' }}"
				REDIS_URI = "prod.redis.service.consul:6379:1"
				EMAIL_HOST = "{{ '127.0.0.1' if fake_email_confirmation is not defined else '' }}"
				BLOB_DIR = "/assets"
				DEFAULT_FROM_EMAIL = "{{ sender_address }}"
				http_proxy = "{{ http_proxy|default() }}"
				https_proxy = "{{ http_proxy|default() }}"
                no_proxy = "{{ '.consul' if http_proxy is defined }}"
				VERSION = "{{ ansible_local.backend_version.tag }}"
                DASHBOARD_VERSION = "{{ ansible_local.dashboard_version.tag }}"
                WEBCLIENT_VERSION = "{{ ansible_local.webclient_version.tag }}"
                BACKEND_STACK_VERSION = "{{ ansible_local.backend_stack_version.tag }}"
				FAKE_PIN = "{{ fake_pin|default() }}"
				FAKE_SMS = "{{ fake_sms|default() }}"
				FAKE_EMAIL_CONFIRMATION = "{{ fake_email_confirmation|default() }}"
				FAKE_DB_ENCRYPTION = "{{ fake_db_encryption|default() }}"
				FAKE_VALIDATE_DOMAIN = "{{ fake_validate_domain|default() }}"
				BIND_HOST = "${NOMAD_IP_http}"
				BIND_PORT = "${NOMAD_PORT_http}"
				WEBSOCKETS_ENABLED = "{{ websockets_enabled | default('true')}}"
				BIND_PORT_WS = "${NOMAD_PORT_ws}"
				ENABLE_PROXY_FOR_APNS = "{{ ENABLE_PROXY_FOR_APNS | default('false')}}"
				USE_APNS_STANDARD_PORT = "{{ USE_APNS_STANDARD_PORT | default('false')}}"
				VOIP_URL = "http://voipWeb.service.consul:7080"
				LOGLEVEL = "{{ backend_loglevel|default() }}"
{% if not (is_legacy_installation | default('True') | lower | bool) %}
                ALLOW_DASHBOARD_ORIGINS = "https://{{ dashboard_hostname|default() }}"
                ALLOW_WEBCLIENT_ORIGINS = "https://{{ webclient_hostname|default() }}"
{% endif %}
				WORKERS = "{{ workers|default() }}"
				GUNICORN_MAX_REQUESTS="{{ worker_gunicorn_max_requests | default('500') }}"
      			CHANNEL_GROUP_EXPIRY = "{{ channel_group_expiry|default('86400') }}"
				DISABLE_GC_RECONFIGURATION = "{{ disable_gc_reconfiguration | default('false') | lower }}"
				FCM_SERVICE_ACCOUNT_FILE = "{{ '/certs/fcm/customer.json' if fcm_account_file is defined and fcm_account_file | length > 0 else '' }}"
                EXTERNAL_HOSTNAME = "{{ external_hostname | first if external_hostname | first | length() > 1 else external_hostname }}"
			}

			resources {
				cpu = {{ (total_cpu_power|int * backend_cpu_alloc)|int }} # Allocated CPU in MHz
				memory = {{ [backend_ram_alloc_min|int, core_count|int * backend_ram_alloc|int]|max }} # Allocated RAM in MB
			}
		}
	}

	group "workers" {
		count = {{ groups['backend_servers'] | count }}

		constraint {
			operator = "distinct_hosts"
			value = "true"
		}

		restart {
			interval = "5m"
			attempts = 10
			delay = "25s"
			mode = "delay"
		}

		network {
			mode = "host"
			port "health" {}
		}

		task "worker" {
			driver = "docker"

			config {
				image = "{{ local_registry | default() }}{{ 'harbor.teamwire.eu/' if use_teamwire_registry | default('true') | bool }}teamwire/backend:{{ ansible_local.backend_version.tag }}"
				auth {
					username = "{{ docker_registry_username }}"
					password = "{{ docker_registry_password }}"
				}

				# Although group-level networking is set to "host"
				# Docker-specific networking setting is required
				# https://github.com/hashicorp/nomad/issues/8747
				network_mode = "host"
				logging {
					type = "syslog"
					config {
						tag = "teamwire-worker"
						syslog-facility = "local6"
					}
				}

				volumes = [
					"/data/assets:/assets",
					"/data/certs/apns:/app/certs/apns"{% if fcm_account_file is defined and fcm_account_file | length > 0 %},
					"/data/certs/fcm/customer.json:/certs/fcm/customer.json"
{%endif %}
				]
			}

			service {
				name = "${TASK}"
				tags = ["teamwire"]
				port = "health"
				check {
					type = "http"
					path = "/health"
					interval = "15s"
					timeout = "2s"
				}
			}
{% raw %}
			template {
			data = <<EOH
			AESKEY = "{{ with secret "secret/database/aes_key"}}{{.Data.value}}{{end}}"
{% endraw %}{% if mysql_host is defined %}{%raw %}
			MYSQL_PASSWORD = "{{ with secret "secret/database/password"}}{{.Data.value}}{{end}}"
{% endraw %}{%endif %}{% raw %}
{% endraw %}{% if oracle_host is defined %}{%raw %}
			ORA_PASSWORD = "{{ with secret "secret/database/password"}}{{.Data.value}}{{end}}"
{% endraw %}{%endif %}{% raw %}
			REDIS_PASSWORD = "{{ with secret "secret/redis/password"}}{{.Data.value}}{{end}}"
			EOH
			destination = "secrets/file.env"
			env = true
			}
{% endraw %}
			env {
				MODE = "worker"
                VAULT_TOKEN = "{{ nomad_server_vault_token | default() }}"
                VAULT_ADDR = "https://vault.service.consul:8200"
                VAULT_AES_SECRET_PATH = "secret/database/aes_key"
				MYSQL_HOST = "{{ mysql_host | default() }}"
				MYSQL_PORT = "{{ mysql_port | default() }}"
				MYSQL_DATABASE = "{{ teamwire_db_name if mysql_host is defined else '' }}"
				MYSQL_USER = "{{ teamwire_db_user if mysql_host is defined else '' }}"
				ORA_HOST = "{{ oracle_host | default() }}"
				ORA_PORT = "{{ oracle_port | default() }}"
				ORA_DATABASE = "{{ teamwire_db_name if oracle_host is defined else '' }}"
				ORA_USER = "{{ teamwire_db_user if oracle_host is defined else '' }}"
				REDIS_URI = "prod.redis.service.consul:6379:1"
				EMAIL_HOST = "{{ '127.0.0.1' if fake_email_confirmation is not defined else '' }}"
				NOTIFICATION_SERVER_URL = "http://notification-server-9081.service.consul:9081"
				BLOB_DIR = "/assets"
{% if apns_certificate is defined %}
				APNS_CERT_1 = "/app/certs/apns/aps-production.pem,push_production,{{ apns_appid | default('com.teamwire.messenger') }}"
{% endif %}
{% if apns_certificate_2 is defined %}
				APNS_CERT_2 = "/app/certs/apns/{{ apns_certificate_2 | basename }},{{ apns_certificate_type_2 | default('push_production') }},{{ apns_appid_2 }}"
{% endif %}
{% if apns_certificate_3 is defined %}
				APNS_CERT_3 = "/app/certs/apns/{{ apns_certificate_3 | basename }},{{ apns_certificate_type_3 | default('push_production') }},{{ apns_appid_3 }}"
{% endif %}
				http_proxy = "{{ http_proxy|default() }}"
				https_proxy = "{{ http_proxy|default() }}"
                no_proxy = "{{ '.consul' if http_proxy is defined }}"
				FAKE_DB_ENCRYPTION = "{{ fake_db_encryption|default() }}"
				BIND_HOST = "${NOMAD_IP_health}"
				BIND_PORT = "${NOMAD_PORT_health}"
				ENABLE_PROXY_FOR_APNS = "{{ ENABLE_PROXY_FOR_APNS | default('false')}}"
				USE_APNS_STANDARD_PORT = "{{ USE_APNS_STANDARD_PORT | default('false')}}"
				LOGLEVEL = "{{ worker_loglevel|default() }}"
				DEFAULT_FROM_EMAIL = "{{ sender_address }}"
				FCM_SERVICE_ACCOUNT_FILE = "{{ '/certs/fcm/customer.json' if fcm_account_file is defined and fcm_account_file | length > 0 else '' }}"
			}

			resources {
				cpu = {{ (total_cpu_power|int * worker_cpu_alloc)|int }} # Allocated CPU in MHz
				memory = {{ [worker_ram_alloc_min|int, core_count|int * worker_ram_alloc|int]|max }} # Allocated RAM in MB
			}
		}
	}

	group "beat" {

		network {
			mode = "host"
		}

		task "beat" {
			driver = "docker"

			config {
				image = "{{ local_registry | default() }}{{ 'harbor.teamwire.eu/' if use_teamwire_registry | default('true') | bool }}teamwire/backend:{{ ansible_local.backend_version.tag }}"
				auth {
					username = "{{ docker_registry_username }}"
					password = "{{ docker_registry_password }}"
				}

				# Although group-level networking is set to "host"
				# Docker-specific networking setting is required
				# https://github.com/hashicorp/nomad/issues/8747
				network_mode = "host"
				logging {
					type = "syslog"
					config {
						tag = "teamwire-beat"
						syslog-facility = "local6"
					}
				}
				volumes = [
					"/data/beat:/beat"
				]
			}

			service {
				name = "${TASK}"
				tags = ["teamwire"]
			}
{% raw %}
			template {
			data = <<EOH
			AESKEY = "{{ with secret "secret/database/aes_key"}}{{.Data.value}}{{end}}"
{% endraw %}{% if mysql_host is defined %}{%raw %}
			MYSQL_PASSWORD = "{{ with secret "secret/database/password"}}{{.Data.value}}{{end}}"
{% endraw %}{%endif %}{% raw %}
{% endraw %}{% if oracle_host is defined %}{%raw %}
			ORA_PASSWORD = "{{ with secret "secret/database/password"}}{{.Data.value}}{{end}}"
{% endraw %}{%endif %}{% raw %}
			REDIS_PASSWORD = "{{ with secret "secret/redis/password"}}{{.Data.value}}{{end}}"
			EOH
			destination = "secrets/file.env"
			env = true
			}
{% endraw %}
			env {
				MODE = "beat"
				VAULT_TOKEN = "{{ nomad_server_vault_token | default() }}"
                VAULT_ADDR = "https://vault.service.consul:8200"
                VAULT_AES_SECRET_PATH = "secret/database/aes_key"
				MYSQL_HOST = "{{ mysql_host | default() }}"
				MYSQL_PORT = "{{ mysql_port | default() }}"
				MYSQL_DATABASE = "{{ teamwire_db_name if mysql_host is defined else '' }}"
				MYSQL_USER = "{{ teamwire_db_user if mysql_host is defined else '' }}"
				ORA_HOST = "{{ oracle_host | default() }}"
				ORA_PORT = "{{ oracle_port | default() }}"
				ORA_DATABASE = "{{ teamwire_db_name if oracle_host is defined else '' }}"
				ORA_USER = "{{ teamwire_db_user if oracle_host is defined else '' }}"
				REDIS_URI = "prod.redis.service.consul:6379:1"
				CELERY_BEAT_SCHEDULE = "/beat/celerybeat-schedule"
				FAKE_DB_ENCRYPTION = "{{ fake_db_encryption|default() }}"
				LOGLEVEL = "{{ beat_loglevel|default() }}"
				FCM_SERVICE_ACCOUNT_FILE = "{{ '/certs/fcm/customer.json' if fcm_account_file is defined and fcm_account_file | length > 0 else '' }}"
			}

			resources {
				cpu = 150 # Allocated CPU in MHz
				memory = {{ [beat_ram_alloc_min|int, 384]|max }}  # Allocated RAM in MB
			}
		}
	}

	group "notification-server" {

		network {
			# https://www.nomadproject.io/docs/drivers/docker#using-the-port-map
			port "http" {
				to = 9080
			}
			port "rest" {
				static = 9081
			}
		}

		task "notification-server" {
			driver = "docker"

			config {
				image = "{{ local_registry | default() }}{{ 'harbor.teamwire.eu/' if use_teamwire_registry | default('true') | bool }}teamwire/notification-server:{{ ansible_local.backend_version.tag }}"
				auth {
					username = "{{ docker_registry_username }}"
					password = "{{ docker_registry_password }}"
				}
				ports = [ "http", "rest" ]

				logging {
					type = "syslog"
					config {
						tag = "teamwire-notifications"
						syslog-facility = "local6"
					}
				}
			}

			service {
				name = "${TASK}-9080"
				tags = ["teamwire"]
				port = "http"
				check {
					type = "http"
					path = "/"
					interval = "15s"
					timeout = "2s"
				}
			}

			service {
				name = "${TASK}-9081"
				tags = ["teamwire"]
				port = "rest"
			}
{% raw %}
			template {
			data = <<EOH
			REDIS_PASSWORD = "{{ with secret "secret/redis/password"}}{{.Data.value}}{{end}}"
			EOH
			destination = "secrets/file.env"
			env = true
			}
{% endraw %}
			env {
				REDIS_URI = "prod.redis.service.consul:6379:1"
				LOGLEVEL = "{{ notification_loglevel|default() }}"
			}

			resources {
				cpu = {{ (total_cpu_power|int * notification_cpu_alloc)|int }} # Allocated CPU in MHz
				memory = {{ [notification_ram_alloc_min|int, core_count|int * notification_ram_alloc|int]|max }} # Allocated RAM in MB
			}
		}
	}
}
