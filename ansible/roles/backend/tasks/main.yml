---
- name: Create the backend storage directories
  ansible.builtin.file:
    path: "/data{{'/' + tw_environments[ (groups['backend_servers']|first) ] | default() if tw_environments is defined }}{{ '/' + item }}"
    owner: daemon
    mode: "{{ (item == 'archiving/gpg') | ternary('0700', '0750') }}" # sets file mode 0700 if the directory is archiving/gpg, else 0750
    state: directory
  when: config_done is defined
  run_once: true
  with_items:
    - 'archiving'
    - 'archiving/gpg'
    - 'assets'
    - 'website-screenshot-cache'
    - 'beat'

- name: Create the backend certificate storage directories
  ansible.builtin.file:
    path: /data/certs
    owner: daemon
    group: ssl-cert
    mode: 0750
    state: directory
  when: config_done is defined
  run_once: true

- name: Create the backend apns certificate storage directories
  ansible.builtin.file:
    path: /data/certs/apns
    owner: daemon
    group: ssl-cert
    mode: 0750
    state: directory
  when:
    - config_done is defined
    - apns_certificate is defined or apns_certificate_2 is defined or apns_certificate_3 is defined
  run_once: true

- name: Install the APNS certificate
  ansible.builtin.copy:
    src: "{{ apns_certificate }}"
    dest: /data/certs/apns/aps-production.pem
    mode: 0440
    owner: daemon
    group: ssl-cert
  when:
    - config_done is defined
    - apns_certificate is defined
  run_once: true
  register: apns_source

- name: Install the secondary APNS certificate
  ansible.builtin.copy:
    src: "{{ apns_certificate_2 }}"
    dest: "/data/certs/apns/{{ apns_certificate_2 | basename }}"
    mode: 0440
    owner: daemon
    group: ssl-cert
  when: apns_certificate_2 is defined
  run_once: true
  register: apns2_source

- name: Install the third APNS certificate
  ansible.builtin.copy:
    src: "{{ apns_certificate_3 }}"
    dest: "/data/certs/apns/{{ apns_certificate_3 | basename }}"
    mode: 0440
    owner: daemon
    group: ssl-cert
  when: apns_certificate_3 is defined
  run_once: true
  register: apns3_source

- name: Check if teamwire worker is running
  ansible.builtin.command: docker ps # noqa no-handler
  register: docker_procs
  when:
    - (apns_source.changed or apns2_source.changed or apns3_source.changed)
    - ansible_play_hosts | length() == 1

- name: Restart teamwire worker if APNS certificates have been updated and on single-setup
  ansible.builtin.command: docker restart teamwire_worker # noqa no-handler
  when:
    - (apns_source.changed or apns2_source.changed or apns3_source.changed)
    - ansible_play_hosts | length() == 1
    - "'teamwire_worker' in docker_procs.stdout"

- name: Include single server
  ansible.builtin.include_tasks: "single.yml"
  when: "'backend_servers' not in groups"

- name: Include haproxy
  ansible.builtin.include_tasks: "haproxy.yml"
  when:
    - mysql_host is not defined
    - "'database_servers' in groups"
    - groups['database_servers'] | length > 1

# The cluster backend deployment is delegated to the nomad servers
