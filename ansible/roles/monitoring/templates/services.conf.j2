/*
 * Service apply rules.
 *
 * Tip: Use `icinga2 object list --type Service` to
 * list all service objects after running
 * configuration validation (`icinga2 daemon -C`).
 */

apply Service "check-ping" {
  import "generic-service"
  check_command = "ping4"
  assign where host.address
}

apply Service "check-ssh" {
  import "generic-service"
  check_command = "ssh"
  assign where (host.address || host.address6) && host.vars.os == "Linux"
}

apply Service for (disk => config in host.vars.disks) {
  import "generic-service"
  check_command = "disk"
  command_endpoint = host.vars.client_endpoint
  assign where host.vars.client_endpoint
  vars += config
}

apply Service "check-load" {
  import "generic-service"
  check_command = "load"
  vars.load_percpu = true
  command_endpoint = host.vars.client_endpoint
  assign where host.vars.os == "Linux" && host.vars.client_endpoint
}

apply Service "check-memory" {
  import "generic-service"
  check_command = "memory"

  vars.warning_threshold= "{{ '85' if ansible_distribution_release == 'bookworm' else '15' }}%"
  vars.critical_threshold = "{{ '90' if ansible_distribution_release == 'bookworm' else '10' }}%"

  command_endpoint = host.vars.client_endpoint
  assign where host.vars.os == "Linux" && host.vars.client_endpoint
}

apply Service "check-swap" {
  import "generic-service"
  check_command = "swap"

  vars.swap_wfree = "25%"
  vars.swap_cfree = "10%"

  command_endpoint = host.vars.client_endpoint
  assign where host.vars.os == "Linux" && host.vars.client_endpoint
}

apply Service "check-ntp" {
  import "generic-service"
  check_command = "check_time"
  vars.delay = {{ check_delay }}
  vars.timeserver =  "{{ ntp_servers |Â default(['ptbtime1.ptb.de', 'ptbtime2.ptb.de', 'ptbtime3.ptb.de']) | first }}"

  command_endpoint = host.vars.client_endpoint
  assign where host.vars.os == "Linux" && host.vars.client_endpoint
}

apply Service "check-mail-queue" {
  import "generic-service"
  check_command = "mailq"

  vars.mailq_warning = 50
  vars.mailq_critical = 100
{% if use_nullmailer is defined and use_nullmailer | lower == "true" %}
  vars.mailq_servertype = "nullmailer"
{% else %}
  vars.mailq_servertype = "postfix"
{% endif %}
  command_endpoint = host.vars.client_endpoint
  assign where host.vars.os == "Linux" && host.vars.client_endpoint
}

{% if use_nullmailer is defined and use_nullmailer | lower == "true" %}
apply Service "check-process-nullmailer" {
 import "generic-service"
  check_command = "procs"

  vars.procs_command = "nullmailer-send"
  vars.procs_critical = "1:"
  command_endpoint = host.vars.client_endpoint
  assign where host.vars.os == "Linux"
}
apply Service "check-process-xinetd" {
 import "generic-service"
  check_command = "procs"

  vars.procs_command = "xinetd"
  vars.procs_critical = "1:"
  command_endpoint = host.vars.client_endpoint
  assign where host.vars.os == "Linux"
}
{% endif %}

apply Service for (http_vhost => config in host.vars.http_vhosts) {
  import "generic-service"
  check_command = "http"
  vars += config
}

apply Service "check-icinga" {
  import "generic-service"
  check_command = "icinga"

  assign where host.name == NodeName
}

{% if groups['all'] | length() > 1 %}
apply Service "check-consul-health" {
  import "generic-service"
  check_command = "http"

  vars.http_port = 8500
  vars.http_uri = "/v1/status/leader"
  // a healthy Consul returns the address of the leader, including the port number
  vars.http_string = "8300"
  vars.address = "127.0.0.1"
  vars.http_ssl = "false"

  command_endpoint = host.vars.client_endpoint
  assign where host.vars.os == "Linux" && "external_servers" !in host.vars.roles
}
{% endif %}

apply Service "check-nomad-health" {
  import "generic-service"
  check_command = "http"

  vars.http_port = 4646
  vars.http_uri = "/v1/status/leader"
  // a healthy Nomad returns the address of the leader, including the port number
  vars.http_string = "4647"
  vars.address = "127.0.0.1"
  vars.http_ssl = "false"

  command_endpoint = host.vars.client_endpoint
  assign where "hashi_servers" in host.vars.roles || "backend_servers" in host.vars.roles
}


{% for job in nomad_jobs %}
{% if job == 'teamwire' %}
apply Service "check-nomad-job-{{ job }}" {
  import "generic-service"
  check_command = "http"

  vars.http_port = 4646
  vars.http_uri = "/v1/job/{{ job }}"
  vars.http_string = "running"
  vars.address = "127.0.0.1"
  vars.http_ssl = "false"

  command_endpoint = host.vars.client_endpoint
  assign where "hashi_servers" in host.vars.roles
}
{% else %}
{% if enable_voip is defined and enable_voip == "true" %}
apply Service "check-nomad-job-{{ job }}" {
  import "generic-service"
  check_command = "http"

  vars.http_port = 4646
  vars.http_uri = "/v1/job/{{ job }}"
  vars.http_string = "running"
  vars.address = "127.0.0.1"
  vars.http_ssl = "false"

  command_endpoint = host.vars.client_endpoint
  assign where "voip_servers" in host.vars.roles
}
{% endif %}
{% endif %}
{% endfor %}

{% if ansible_local.vault.initialized == "true" or groups['all'] | length() > 1 and hostvars[groups['hashi_servers'][0]].ansible_local.vault.initialized == "true" %}
apply Service "check-vault-seal-status" {
  import "generic-service"
  check_command = "http"

  vars.http_port = 8200
  vars.http_uri = "/v1/sys/seal-status"
  // Check that Vault is running and is unsealed
  vars.http_string = "sealed\":false"
  vars.address = "127.0.0.1"
  vars.http_ssl = "true"

  command_endpoint = host.vars.client_endpoint
  assign where "hashi_servers" in host.vars.roles
{% if groups['all'] | length() == 1 %}
  assign where host.vars.os == "Linux"
{% endif %}
}

apply Service "check-vault-cert" {
  import "generic-service"
  check_command = "ssl_cert"

  vars.cert = "/var/lib/vault/ssl/vault.crt"
  vars.warn = "2592000"
  vars.crit = "864000"

  command_endpoint = host.vars.client_endpoint
  assign where "hashi_servers" in host.vars.roles || "backend_servers" in host.vars.roles
{% if groups['all'] | length() == 1 %}
  assign where host.vars.os == "Linux"
{% endif %}
}
{% endif %}

{% for key, value in redis_instances.items() %}
apply Service "check-redis-{{ key }}" {
  import "generic-service"
  check_command = "check_redis"

{% if value.password is not none %}
  vars.redis_password = "{{ value.password }}"
{% endif %}
  vars.redis_port = {{ value.server_port }}

  command_endpoint = host.vars.client_endpoint
  assign where "redis_servers" in host.vars.roles
{% if groups['all'] | length() == 1 %}
  assign where host.vars.os == "Linux"
{% endif %}
}
{% endfor %}

{% for instance in redis_instances %}
apply Service "check-redis-{{ instance }}-dns" {
  import "generic-service"
  check_command = "dns-no-defaults"

  vars.dns_lookup = "{{ instance }}.redis.service.consul"
  vars.dns_server = "127.0.0.1"

  command_endpoint = host.vars.client_endpoint
  assign where "backend_servers" in host.vars.roles && host.vars.client_endpoint
}
{% endfor %}

{% for key, value in redis_instances.items() %}
apply Service "check-redis-sentinel-{{ key }}" {
  import "generic-service"
  check_command = "check_redis"

  vars.redis_port = {{ value.sentinel_port }}

  command_endpoint = host.vars.client_endpoint
  assign where "redis_servers" in host.vars.roles
}
{% endfor %}

{% if 'database_servers' in groups or groups['all'] | length() == 1 %}
apply Service "check-mysql" {
  import "generic-service"
  check_command = "mysql"
  command_endpoint = host.vars.client_endpoint

  vars.mysql_username = "{{ monitoring_db_user }}"
  vars.mysql_password = "{{ monitoring_db_password }}"
  vars.mysql_hostname = "{{ monitoring_db_host }}"
  vars.mysql_port = "{{ monitoring_db_port }}"
{% if groups['all'] | length > 1 and enable_tls_mysql is defined and enable_tls_mysql | lower == "true" %}
  vars.mysql_ssl = "true"
{% endif %}

  assign where "database_servers" in host.vars.roles && host.vars.client_endpoint
{% if groups['all'] | length() == 1 %}
  assign where host.vars.os == "Linux"
{% endif %}
}
{% endif %}

{% if 'database_servers' in groups or ( groups['all'] | length() == 1 and monitoring_db_host == "localhost" ) %}
apply Service "check-mysql-connections" {
  import "generic-service"
  check_command = "check_mysql_health"
  command_endpoint = host.vars.client_endpoint

  vars.mysql_health_username = "{{ monitoring_db_user }}"
  vars.mysql_health_password = "{{ monitoring_db_password }}"
  vars.mysql_health_hostname = "{{ monitoring_db_host }}"
  vars.mysql_health_port = "{{ monitoring_db_port }}"
  vars.mysql_health_mode = "threads-connected"
  vars.mysql_health_warn = "410"
  vars.mysql_health_crit = "460"

  assign where "database_servers" in host.vars.roles && host.vars.client_endpoint
{% if groups['all'] | length() == 1 %}
  assign where host.vars.os == "Linux"
{% endif %}
}
{% endif %}

{% if ('frontend_servers' in groups or groups['all'] | length() == 1) and ssl_keyfile is defined %}
apply Service "check-ssl-cert" {
  import "generic-service"
  check_command = "ssl"

  vars.ssl_port = 443
  vars.ssl_cert_valid_days_warn = 30
  vars.ssl_cert_valid_days_critical = 10

  assign where "frontend_servers" in host.vars.roles
{% if groups['all'] | length() == 1 %}
  assign where host.vars.os == "Linux"
{% endif %}
}
{% endif %}

{% if 'frontend_servers' in groups %}
apply Service "check-process-consul-template" {
 import "generic-service"
  check_command = "procs"

  vars.procs_command = "consul-template"
  vars.procs_critical = "1:"
  command_endpoint = host.vars.client_endpoint
  assign where "frontend_servers" in host.vars.roles
}
{% endif %}

{% if groups['all'] | length() > 1 %}
apply Service "check-process-dnsmasq" {
 import "generic-service"
  check_command = "procs"

  vars.procs_command = "dnsmasq"
  vars.procs_critical = "1:"
  command_endpoint = host.vars.client_endpoint
  assign where host.vars.os == "Linux"
}
{% endif %}

{% if 'load_balancers' in groups %}
apply Service "check-process-keepalived" {
 import "generic-service"
  check_command = "procs"

  vars.procs_command = "keepalived"
  vars.procs_critical = "1:"
  command_endpoint = host.vars.client_endpoint
  assign where "load_balancers" in host.vars.roles
}
{% endif %}

{% if 'backend_servers' in groups %}
apply Service "check-haproxy" {
  import "generic-service"
  check_command = "haproxy"

  vars.socket = "/var/run/haproxy/admin.sock"
  command_endpoint = host.vars.client_endpoint
  assign where "backend_servers" in host.vars.roles
}
{% endif %}


{% if apns_certificate is defined %}
apply Service "check-apns" {
  import "generic-service"
  check_command = "ssl_cert"

  vars.cert = "/data/certs/apns/aps-production.pem"
  vars.warn = "2592000"
  vars.crit = "864000"

  command_endpoint = host.vars.client_endpoint
  assign where "backend_servers" in host.vars.roles
{% if groups['all'] | length() == 1 %}
  assign where host.vars.os == "Linux"
{% endif %}
}
{% endif %}

{% if apns_certificate_2 is defined %}
apply Service "check-apns-2" {
  import "generic-service"
  check_command = "ssl_cert"

  vars.cert = "/data/certs/apns/{{ apns_certificate_2 | basename }}"
  vars.warn = "2592000"
  vars.crit = "864000"

  command_endpoint = host.vars.client_endpoint
  assign where "backend_servers" in host.vars.roles
{% if groups['all'] | length() == 1 %}
  assign where host.vars.os == "Linux"
{% endif %}
}
{% endif %}

{% if apns_certificate_3 is defined %}
apply Service "check-apns-3" {
  import "generic-service"
  check_command = "ssl_cert"

  vars.cert = "/data/certs/apns/{{ apns_certificate_3 | basename }}"
  vars.warn = "2592000"
  vars.crit = "864000"

  command_endpoint = host.vars.client_endpoint
  assign where "backend_servers" in host.vars.roles
{% if groups['all'] | length() == 1 %}
  assign where host.vars.os == "Linux"
{% endif %}
}
{% endif %}

apply Service "check-container-docker-registry" {
  import "generic-service"
  check_command = "check_docker"

  vars.docker_containers = "docker-registry"
  vars.docker_status = "running"

  command_endpoint = host.vars.client_endpoint
  assign where "docker_registry" in host.vars.roles
}

{% if groups['all'] | length() == 1 %}
apply Service "check-container-backend" {
  import "generic-service"
  check_command = "check_docker"

  vars.docker_containers = "teamwire_backend"
  vars.docker_status = "running"

  command_endpoint = host.vars.client_endpoint
  assign where host.vars.os == "Linux"
}

apply Service "check-container-worker" {
  import "generic-service"
  check_command = "check_docker"

  vars.docker_containers = "teamwire_worker"
  vars.docker_status = "running"

  command_endpoint = host.vars.client_endpoint
  assign where host.vars.os == "Linux"
}

apply Service "check-container-beat" {
  import "generic-service"
  check_command = "check_docker"

  vars.docker_containers = "teamwire_beat"
  vars.docker_status = "running"

  command_endpoint = host.vars.client_endpoint
  assign where host.vars.os == "Linux"
}

apply Service "check-container-notification-server" {
  import "generic-service"
  check_command = "check_docker"

  vars.docker_containers = "teamwire_notification_server"
  vars.docker_status = "running"

  command_endpoint = host.vars.client_endpoint
  assign where host.vars.os == "Linux"
}

{% if enable_voip is defined and enable_voip == 'true' %}
apply Service "check-container-voip-web" {
  import "generic-service"
  check_command = "check_docker"

  vars.docker_containers = "teamwire_web"
  vars.docker_status = "running"

  command_endpoint = host.vars.client_endpoint
  assign where host.vars.os == "Linux"
}

apply Service "check-container-voip-jvb" {
  import "generic-service"
  check_command = "check_docker"

  vars.docker_containers = "teamwire_jvb"
  vars.docker_status = "running"

  command_endpoint = host.vars.client_endpoint
  assign where host.vars.os == "Linux"
}

apply Service "check-container-voip-jicofo" {
  import "generic-service"
  check_command = "check_docker"

  vars.docker_containers = "teamwire_jicofo"
  vars.docker_status = "running"

  command_endpoint = host.vars.client_endpoint
  assign where host.vars.os == "Linux"
}

apply Service "check-container-voip-prosody" {
  import "generic-service"
  check_command = "check_docker"

  vars.docker_containers = "teamwire_prosody"
  vars.docker_status = "running"

  command_endpoint = host.vars.client_endpoint
  assign where host.vars.os == "Linux"
}

apply Service "check-haproxy-voip" {
  import "generic-service"
  check_command = "http"

  vars.http_port = 8443
  vars.http_uri = "/"
  vars.address = "127.0.0.1"
  vars.http_ssl = "true"

  command_endpoint = host.vars.client_endpoint
  assign where host.vars.os == "Linux"
}
{% endif %}

apply Service "check-haproxy-backend" {
  import "generic-service"
  check_command = "http"
  vars.http_vhost = "{{ external_hostname }}"
  vars.http_uri = "/health"
  vars.http_ssl = {{ 'true' if ssl_keyfile is defined else 'false' }}

  command_endpoint = host.vars.client_endpoint
  assign where host.vars.os == "Linux"
}

apply Service "check-haproxy-notification-server" {
  import "generic-service"
  check_command = "http"
  vars.http_vhost = "{{ external_hostname }}"
  vars.http_uri = "/notifications/"
  vars.http_ssl = {{ 'true' if ssl_keyfile is defined else 'false' }}

  command_endpoint = host.vars.client_endpoint
  assign where host.vars.os == "Linux"
}

{% endif %}

apply Service "check-process-rsyslogd" {
 import "generic-service"
  check_command = "procs"

  vars.procs_command = "rsyslogd"
  vars.procs_critical = "1:"
  command_endpoint = host.vars.client_endpoint
  assign where host.vars.os == "Linux"
}

apply Service "check-oom" {
  import "generic-service"
  check_command = "check_oom"
  vars.minutes_threshold = "5"

  command_endpoint = host.vars.client_endpoint
  assign where "backend_servers" in host.vars.roles
{% if groups['all'] | length() == 1 %}
  assign where host.vars.os == "Linux"
{% endif %}
}

apply Service "check-ufw" {
  import "generic-service"
  check_command = "check_ufw"

  command_endpoint = host.vars.client_endpoint
  assign where host.vars.os == "Linux"
}
