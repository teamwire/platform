---
- name: Reload systemd
  ansible.builtin.systemd:
    daemon_reload: true

- name: Restart MariaDB
  ansible.builtin.service:
    name: mysql
    state: restarted

- name: Restart consul
  ansible.builtin.service:
    name: consul
    state: restarted

- name: Set innodb in runtime
  community.mysql.mysql_query:
    login_user: root
    login_unix_socket: /var/run/mysqld/mysqld.sock
    query: "SET GLOBAL innodb_buffer_pool_size=({{ innodb_buffer_pool_size }} * 1024 * 1024 * 1024);"

- name: Set optimizer in runtime
  community.mysql.mysql_query:
    login_user: root
    login_unix_socket: /var/run/mysqld/mysqld.sock
    query: "SET GLOBAL optimizer_search_depth={{ optimizer_search_depth_value }};"

- name: Get password hash for root@127.0.0.1
  community.mysql.mysql_query:
    login_user: root
    login_unix_socket: /var/run/mysqld/mysqld.sock
    login_db: mysql
    query: SELECT password from user where user like 'root' and host like '127.0.0.1';
  register: mysql_root_password_hash
  listen: mysql_root_user_update

- name: Set password hash for root@localhost
  community.mysql.mysql_query:
    login_user: root
    login_unix_socket: /var/run/mysqld/mysqld.sock
    login_db: mysql
    query: "SET PASSWORD FOR root@localhost = '{{ item.Password }}'"
  with_items: "{{ mysql_root_password_hash.query_result }}"
  listen: mysql_root_user_update

- name: Maxscale_restart
  ansible.builtin.service:
    name: maxscale
    state: restarted

- name: Generate Password Hash if not defined
  ansible.builtin.command: "maxpasswd {{ mysql_maxscale_password }}"
  register: maxscale_password_hash
  when: ansible_local.maxscale.password_hash is undefined or hostvars[groups['database_servers'] | sort | first].mysql_maxscale_user.changed

- name: Copy maxscale ansible facts
  ansible.builtin.template:
    src: maxscale.fact.j2
    dest: /etc/ansible/facts.d/maxscale.fact
    mode: 0755
  when:
    - maxscale_password_hash is changed

- name: Ansible_facts_reload
  ansible.builtin.setup:
    filter: ansible_local

# ------------------------------------------------------------------------------
# Ensure to flush ssl options when the certificate files for mysql gets
# updated and the database has TLS Communication already enabled
# ------------------------------------------------------------------------------
- name: Check the state of ssl the running mysql server
  listen: Update MySQL Certificates
  community.mysql.mysql_query:
    query: "SHOW VARIABLES LIKE 'have_ssl'"
    login_user: root
    login_unix_socket: /var/run/mysqld/mysqld.sock
  register: mysql_have_ssl

- name: Flush MySQL SSL Certificates
  listen: Update MySQL Certificates
  community.mysql.mysql_query:
    login_user: root
    login_unix_socket: /var/run/mysqld/mysqld.sock
    query: FLUSH SSL
  with_items: "{{ mysql_have_ssl.query_result }}"
  loop_control:
    label: "Flushing MySQL SSL Options"
  when:
    - inventory_hostname in groups['database_servers']
    - item.Value | lower == "yes"
