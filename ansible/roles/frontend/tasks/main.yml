---
- name: Retrieve package information
  ansible.builtin.package_facts:
    manager: "apt"

- name: Remove nginx
  ansible.builtin.include_tasks: remove_nginx.yml
  when: "'nginx-light' in ansible_facts.packages"

- name: Install HAproxy
  ansible.builtin.apt:
    name: haproxy
    state: present
  register: ha_installed

# This uses systemd's unit file drop-in override mechanism,
# allowing us to keep vendor's default service unit file together with our customizations
# https://manpages.debian.org/systemd/systemd.unit.5.en.html
- name: Adapt HAproxy service to split-configuration setup
  block:
    - name: Create HAproxy drop-in override directory
      ansible.builtin.file:
        path: /etc/systemd/system/haproxy.service.d
        state: directory
        owner: root
        group: root
        mode: 0755
      register: haproxy_systemd_service_unit_override

    - name: Adapt HAproxy service to split-configuration setup
      ansible.builtin.template:
        src: haproxy.service.conf.j2
        dest: "{{ haproxy_systemd_service_unit_override.path }}/haproxy.service.conf"
        owner: root
        group: root
        mode: 0644
      notify:
        - Reload systemd
        - Restart haproxy

    - name: Remove old HAproxy service file
      ansible.builtin.file:
        path: /etc/systemd/system/haproxy.service
        state: absent
      notify:
        - Reload systemd
        - Restart haproxy

- name: Start and enable HAProxy service
  ansible.builtin.service:
    name: haproxy
    state: started
    enabled: true

- name: Remove default HAproxy configs
  ansible.builtin.file:
    name: "{{ item }}"
    state: absent
  with_items:
    - /etc/haproxy/haproxy.cfg
    - /etc/haproxy/haproxy.cfg.bak
  notify: Reload haproxy

- name: Write HAProxy globals and frontend configuration files (Single server)
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: 0664
    owner: haproxy
    group: haproxy
  with_items:
    - { src: '{{ globals_haproxy_template }}', dest: '/etc/haproxy/01-globals.cfg' }
    - { src: '{{ frontend_haproxy_template }}', dest: '/etc/haproxy/03-frontend.cfg' }
  notify: Restart haproxy
  when: "'frontend_servers' not in groups and groups['all'] | length() == 1"

- name: Write HAProxy globals configuration file (cluster servers)
  ansible.builtin.template:
    src: "{{ globals_haproxy_template }}"
    dest: "/etc/haproxy/01-globals.cfg"
    mode: 0664
    owner: haproxy
    group: haproxy
  notify: Restart haproxy
  when:
    - "'frontend_servers' in groups"
    - groups['all'] | length() > 1

- name: Collect all error template files
  ansible.builtin.find:
    paths: "/etc/haproxy/errors/"
    patterns: "*.http"
  register: errorfiles

- name: Replace HTTP version in error files from 1.0 to 1.1
  ansible.builtin.replace:
    path: "{{ item.path }}"
    regexp: 'HTTP\/1.0'
    replace: 'HTTP/1.1'
  with_items: "{{ errorfiles.files }}"
  notify: Reload haproxy

- name: Generate the SSL certificate
  ansible.builtin.template:
    src: haproxy_oldstyle_certificate.j2
    dest: /etc/ssl/certs/server_and_intermediate_and_root.crt
    mode: 0640
  when: ssl_certfile is defined
  notify: Reload haproxy

- name: Create the SSL certificate chain
  ansible.builtin.template:
    src: server_and_intermediate_and_root.crt.j2
    dest: /etc/ssl/certs/server_and_intermediate_and_root.crt
    mode: 0640
  when:
    - ssl_server_certificate is defined
    - ssl_intermediate_certificate is defined
    - ssl_root_certificate is defined
  notify: Reload haproxy

- name: Create the SSL intermediate and root certificate file
  ansible.builtin.template:
    src: intermediate_and_root.crt.j2
    dest: /etc/ssl/certs/intermediate_and_root.crt
    mode: 0640
  when:
    - ssl_intermediate_certificate is defined
    - ssl_root_certificate is defined
  notify: Reload haproxy

- name: Copy the SSL key
  ansible.builtin.copy:
    src: "{{ ssl_keyfile }}"
    dest: /etc/ssl/private/teamwire-backend.key
    mode: 0640
  when: ssl_keyfile is defined
  notify: Reload haproxy

- name: Copy teamwire intermediate
  ansible.builtin.copy:
    src: "{{ ssl_intermediate_certificate }}"
    dest: "/etc/ssl/certs/teamwire.intermediate.crt"
    mode: 0640
  when: ssl_intermediate_certificate is defined

- name: Copy teamwire certificate
  ansible.builtin.copy:
    src: "{{ ssl_server_certificate }}"
    dest: "/etc/ssl/certs/teamwire.server.crt"
    mode: 0640
  when: ssl_server_certificate is defined

- name: Copy teamwire root certificate
  ansible.builtin.copy:
    src: "{{ ssl_root_certificate }}"
    dest: "/etc/ssl/certs/teamwire.root.crt"
    mode: 0600
  when: ssl_root_certificate is defined

- name: Ensure socat is installed
  ansible.builtin.apt:
    name: socat
    state: present

- name: Generate a new Diffie-Hellman group
  ansible.builtin.command: /usr/bin/openssl dhparam -out /etc/ssl/private/dhparams.pem 2048
  when: ssl_keyfile is defined
  args:
    creates: /etc/ssl/private/dhparams.pem

- name: Import SSL certificate check
  ansible.builtin.import_tasks: ssl-check.yml

# open firewall ports for the web server
- name: Add Firewall Rule allow 80
  community.general.system.ufw:
    rule: allow
    port: 80
    proto: tcp
  when: config_done is defined

- name: Add Firewall Rule allow 443
  community.general.system.ufw:
    rule: allow
    port: 443
    proto: tcp
  when: ssl_keyfile is defined

- name: Add Firewall Rule allow 8443
  community.general.system.ufw:
    rule: allow
    port: 8443
    proto: tcp
  when:
    - ssl_keyfile is defined
    - enable_voip is defined
    - enable_voip | string() == 'true'

- name: Add Firewall Rule allow 4443
  community.general.system.ufw:
    rule: allow
    port: 4443
    proto: tcp
  when:
    - ssl_keyfile is defined
    - enable_voip is defined
    - enable_voip | string() == 'true'

- name: Add Firewall Rule allow 10000
  community.general.system.ufw:
    rule: allow
    port: 10000
    proto: any
  when:
    - groups.all | length == 1
    - enable_voip is defined
    - enable_voip | string() == 'true'

- name: "Add Firewall Rule allow {{ voip_turn_port }}"
  community.general.ufw:
    rule: allow
    port: "{{ voip_turn_port }}"
    proto: any
  when:
    - groups.all | length == 1
    - enable_voip is defined
    - enable_voip | lower == 'true'
    - enable_stun is defined
    - enable_stun | lower == 'true'

- name: Re-use sockets in TIME_WAIT state for new connections
  ansible.posix.sysctl:
    name: net.ipv4.tcp_tw_reuse
    value: "1"
    state: present

- name: Ensure netfilter can handle a sufficient amount of connections
  ansible.posix.sysctl:
    name: net.nf_conntrack_max
    value: "65536"
    state: present

- name: Increase number of socket connection backlog
  ansible.posix.sysctl:
    name: net.core.somaxconn
    value: "1024"
    state: present
    reload: true

- name: Template voip reverse proxy config
  ansible.builtin.template:
    src: "20-voip.cfg.j2"
    dest: "/etc/haproxy/20-voip.cfg"
    mode: 0644
    owner: root
    group: root
  notify: Restart haproxy
  when:
    - config_done is defined
    - groups['all'] | length == 1
    - enable_voip is defined
    - enable_voip | string() == 'true'

- name: Install logrotate job for haproxy logs
  ansible.builtin.copy:
    src: haproxy-log
    dest: /etc/logrotate.d/haproxy
    owner: root
    group: root
    mode: 0644

- name: Include cluster
  ansible.builtin.include_tasks: cluster.yml
  when: "'frontend_servers' in groups"
