# ----------------------------------------------------
# DEFAULTS
# ----------------------------------------------------
defaults
    # General
    log global
    mode http

    # General Options
    option dontlognull
    option redispatch
    option log-separate-errors
    option tcp-smart-accept
    option tcp-smart-connect
    option http-server-close
    option httplog

    # Backends/Frontend Defaults
    balance roundrobin
    option http-server-close
    option forwardfor

    retries 3

    timeout connect 5s
    timeout client 1m
    timeout server 120s
    timeout check 3s
    timeout queue 3s
    timeout tunnel 3600s

    timeout http-keep-alive  1s
    timeout http-request    15s
    timeout queue           30s
    timeout tarpit          60s

# ----------------------------------------------------
# FRONTEND: STATS
# ----------------------------------------------------
#frontend http-stats
# Prepare vault integration for HAP
#    mode http
#    bind *:3380

#    stats enable
#    stats auth ha_stat_user:ha_stat_pass
#    stats uri /

{% if enable_voip is defined and enable_voip | string() == 'true' -%}
# ----------------------------------------------------
# FRONTEND: VOIP WEB
# ----------------------------------------------------
frontend voip-web-in
    bind {{ ansible_default_ipv4.address if groups['all'] | length == 1 else "*" }}:8080
    {% if ssl_cert is defined or ssl_certfile is defined or ssl_server_certificate is defined %}redirect scheme https code 301 if !{ ssl_fc }
    bind *:8443 ssl crt /etc/ssl/certs/server_and_intermediate_and_root.crt
    bind :::8443 ssl crt /etc/ssl/certs/server_and_intermediate_and_root.crt

    tcp-request inspect-delay 5s
    tcp-request content reject if { req.ssl_ver 3 }
    tcp-request content accept if { req.ssl_hello_type 1 }
    {% endif %}
    http-request set-header X-Forwarded-Port %[dst_port]
    http-request add-header X-Forwarded-Proto https if { ssl_fc }

    http-request capture req.hdr(host) len 32
    http-request capture req.hdr(X-Forwarded-For) len 32
    http-request capture req.hdr(User-Agent) len 32
    http-request capture req.hdr(Connection) len 7
    http-request capture req.hdr(Upgrade) len 9

    log-format 'LIMSTART{ "DATE":"%t","ID":"%ID","STATUS":"%ST","SourceIP":"%ci:%cp","ROUTE":"%ft/%b","METRIC":"%Tq/%Tw/%Tc/%Tr/%Tt ","httpRequest":"%r","requestHeader":"%hr","CON":"%tsc  %ac %fc %bc %sc %rc ","TLS-PROTO":"%sslv","TLS_CIPHER":"%sslc"}LIMEND'
    unique-id-format %{+X}o\ %ci:%cp_%fi:%fp_%Ts_%rt:%pid
    unique-id-header X-Request-ID

    default_backend teamwire-voip-web

{% if groups['all'] | length > 1 %}
# ----------------------------------------------------
# FRONTEND: VOIP VIDEO INACTIVE !!!!!!!!!!!!!!!!!!!!!
# ----------------------------------------------------
#frontend voip-video-in
#    bind *:10000
#    mode tcp

#    option tcplog

#    default_backend teamwire-voip-video
{% endif %}
{% endif %}

# ----------------------------------------------------
# FRONTEND: HTTP + HTTPS
# ----------------------------------------------------
frontend https-in
    bind *:80
    {% if ssl_cert is defined or ssl_certfile is defined or ssl_server_certificate is defined %}redirect scheme https code 301 if !{ ssl_fc }
    bind *:443 ssl crt /etc/ssl/certs/server_and_intermediate_and_root.crt

    # HSTS (15768000 seconds = 6 months)
    http-response set-header Strict-Transport-Security max-age=15768000

    tcp-request inspect-delay 5s
    tcp-request content reject if { req.ssl_ver 3 }
    tcp-request content accept if { req.ssl_hello_type 1 }
    {% endif %}

    maxconn 10240
    timeout http-keep-alive 5m

    http-request set-header X-Forwarded-Port %[dst_port]
    http-request add-header X-Forwarded-Proto https if { ssl_fc }

    http-request capture req.hdr(host) len 32
    http-request capture req.hdr(X-Forwarded-For) len 32
    http-request capture req.hdr(User-Agent) len 32
    http-request capture req.hdr(Connection) len 7
    http-request capture req.hdr(Upgrade) len 9

    log-format 'LIMSTART{ "DATE":"%t","ID":"%ID","STATUS":"%ST","SourceIP":"%ci:%cp","ROUTE":"%ft/%b","METRIC":"%Tq/%Tw/%Tc/%Tr/%Tt ","httpRequest":"%r","requestHeader":"%hr","CON":"%tsc  %ac %fc %bc %sc %rc ","TLS-PROTO":"%sslv","TLS_CIPHER":"%sslc"}LIMEND'
    unique-id-format %{+X}o\ %ci:%cp_%fi:%fp_%Ts_%rt:%pid
    unique-id-header X-Request-ID

    # Admin/Dashboard restricted by IPs
    {% if admin_ip_ranges is defined %}{% for range in admin_ip_ranges %}acl adminpage_allowed src {{ range }}
    {% endfor %}{% raw %}
    acl admin_page_new path_beg,url_dec -m beg -i /static/dashboard /static/admin /static/dashboard/login
    acl admin_page_old path beg.url_dec -m beg -i /dashboard /admin /dashboard/login
    http-request deny if admin_page_new !adminpage_allowed
    http-request deny if admin_page_old !adminpage_allowed
    {% endraw %}{% endif %}

    # Webclient restricted by IPs
    {% if webclient_ip_ranges is defined %}{% if webclient_ip_ranges is not none %}{% for range in webclient_ip_ranges %}acl webclient_allowed src {{ range }}
    {% endfor %}acl webclient_page path_beg,url_dec -m reg -i  ^(/static)?/web-client/?
    http-request deny if webclient_page !webclient_allowed
    {% endif %}{% endif %}

    # ACL
    {%if external_hostname is iterable and external_hostname is not string%}{% for item in external_hostname %}
    acl IS_EXTERNAL_HOSTNAME hdr(host) -m reg -i ^{{ item }}(:[0-9]+)?$
    {% endfor %}{%else%}acl IS_EXTERNAL_HOSTNAME hdr(host) -m reg -i ^{{ external_hostname }}(:[0-9]+)?$
    {%endif%}{% if not (is_legacy_installation | default('True') | lower | bool) %}acl IS_DASHBOARD_DOMAIN hdr(host) -m reg -i ^{{ dashboard_hostname }}(:[0-9]+)?$
    {%endif%}acl IS_ADMIN hdr_beg(host) -i admin

    # Backends redirect
    use_backend notifications  if { path_beg -i /notifications } IS_EXTERNAL_HOSTNAME
    {% if websockets_enabled | string() == 'true' %}use_backend teamwire-backend-websockets if { path_beg -i /ws } IS_EXTERNAL_HOSTNAME
{%endif%}
    use_backend teamwire-backend if IS_EXTERNAL_HOSTNAME || IS_ADMIN
    {% if not (is_legacy_installation | default('True') | lower | bool) %}use_backend teamwire-dashboard if IS_DASHBOARD_DOMAIN
    {%endif%}

# ----------------------------------------------------
# BACKEND: teamwire-backend
# ----------------------------------------------------
backend teamwire-backend
    http-response del-header Server
    http-response set-header Connection keep-alive
    {% if "frontend_servers" in groups %}{% raw %}{{ if service "backend" }} {{ range $index, $service := service "backend" }}
    server backend_{{$index}} {{.Address}}:{{.Port}} check port {{.Port}}{{ end }}
    {{ end }}{% endraw %}
    {%else%}server teamwire-backend 127.0.0.1:8080 check port 8080
    {% endif %}

{% if not (is_legacy_installation | default('True') | lower | bool) %}
# ----------------------------------------------------
# BACKEND: teamwire-dashboard
# ----------------------------------------------------
backend teamwire-dashboard
    http-response del-header Server
    http-response set-header Connection keep-alive
    {% if "frontend_servers" in groups %}{% raw %}{{ if service "dashboard" }} {{ range $index, $service := service "dashboard" }}
    server backend_{{$index}} {{.Address}}:{{.Port}} check port {{.Port}}{{ end }}
    {{ end }}{% endraw %}
    {%else%}server teamwire-dashboard 127.0.0.1:8099 check port 8099
    {% endif %}
{% endif %}

{% if websockets_enabled | string() == 'true' %}
# ----------------------------------------------------
# BACKEND: teamwire-backend-websockets
# ----------------------------------------------------
backend teamwire-backend-websockets
    acl hdr_connection_upgrade hdr(Connection)    -i upgrade
    acl hdr_upgrade_websocket hdr(Upgrade)        -i websocket
    http-response del-header Server
    {% if "frontend_servers" in groups %}{% raw %}{{ if service "backend-websocket" }} {{ range $index, $service := service "backend-websocket" }}
    server backend_ws_{{$index}} {{.Address}}:{{.Port}} check port {{.Port}}{{ end }}
    {{ end }}{% endraw %}
    {%else%}server teamwire-backend_ws 127.0.0.1:8083 check port 8083
    {% endif %}
{%endif%}

# ----------------------------------------------------
# BACKEND: notifications
# ----------------------------------------------------
backend notifications
    acl hdr_connection_upgrade hdr(Connection)                 -i upgrade
    acl hdr_upgrade_websocket  hdr(Upgrade)                    -i websocket
    http-request del-header   X-Powered-By
    http-response del-header Server
    {% if "frontend_servers" in groups %}{% raw %}{{ if service "notification-server-9080" }}{{ range $index, $service := service "notification-server-9080" }}
    server notification-server_{{$index}} {{.Address}}:{{.Port}} check port {{.Port}}{{ end }}
    {{ end }}{% endraw %}
    {%else%}server notifications 127.0.0.1:9080 check port 9080
    {% endif %}
