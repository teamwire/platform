---
workflow:
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG =~ /^\d+\.\d+(\.\d+)?$/

stages:
  - release
  - startup
  - ansible-lint
  - shellcheck
  - Golint

default:
  tags:
    - platform
    - lint

variables:
  ANSIBLE_LINT_IMAGE: "cytopia/ansible-lint:6-0.12"
  ANSIBLE_LINT_CMD: "docker run --rm -v $(pwd):/data $ANSIBLE_LINT_IMAGE"
  SHELLCHECK_VERSION: "0.7.1"
  GOLINT_IMAGE: "cytopia/golint:latest-0.3"
  GOLINT_CMD: "docker run --rm -v $(pwd):/data $GOLINT_IMAGE"

# ------------------------------------------------------------------------------
#
# Rules declaration
#
# ------------------------------------------------------------------------------

.ansible-changes:
  only:
    changes:
      - ansible/**/*

# ------------------------------------------------------------------------------
#
# Release on GitHub
#
# ------------------------------------------------------------------------------

release:
  stage: release
  rules:
    - if: $CI_COMMIT_TAG =~ /^\d+\.\d+(\.\d+)?$/
      when: manual
    - if: $CI_COMMIT_TAG
      when: never
  script:
    - ls -la
    - git remote add github https://${GITHUB_USER}:${GITHUB_TOKEN}@github.com/teamwire/platform.git
    - git push github $CI_COMMIT_TAG
    - git fetch
    - git checkout master
    - git push github master
  after_script:
    - rm -rf .git

# ------------------------------------------------------------------------------
#
# Get docker container image
#
# ------------------------------------------------------------------------------

Ensure ansible-lint docker image exists:
  stage: startup
  script: docker pull $ANSIBLE_LINT_IMAGE
  extends: .ansible-changes

Ensure golint docker image exists:
  stage: startup
  script: docker pull $GOLINT_IMAGE
  only:
    changes:
      - ansible/roles/go/files/ocspResponder.go
      - ansible/roles/go/files/archiving.go

# ------------------------------------------------------------------------------
#
# Check shellcheck version
#
# ------------------------------------------------------------------------------

Ensure shellcheck has correct version:
  stage: startup
  script: dpkg -l | grep "ii  shellcheck" | grep $SHELLCHECK_VERSION
  only:
    changes:
      - packer/build-vmware.sh
      - packer/scripts/fix-network.sh
      - packer/scripts/shrink-image.sh
      - prepare-offline-installation.sh
      - packer/scripts/make-unique.sh
      - packer/scripts/vm-guest-tools.sh
      - ansible/roles/frontend/files/ocsp.sh
      - ansible/roles/db/files/backup_restore_db.sh
      - packer/scripts/prepare-offline-installation.sh
      - ansible/roles/management/files/twctl
      - ansible/roles/management/files/motd.sh

# ------------------------------------------------------------------------------
#
# ansible-lint test
#
# ------------------------------------------------------------------------------

Single server test:
  stage: ansible-lint
  script: /bin/bash -c "$ANSIBLE_LINT_CMD ansible/site.yml -x 301 --force-color"
  extends: .ansible-changes
  needs: ['Ensure ansible-lint docker image exists']

Cluster server test:
  stage: ansible-lint
  script: /bin/bash -c "$ANSIBLE_LINT_CMD ansible/playbooks/cluster.yml -x 301 --force-color"
  extends: .ansible-changes
  needs: ['Ensure ansible-lint docker image exists']

Procedure test:
  stage: ansible-lint
  script: /bin/bash -c "$ANSIBLE_LINT_CMD ansible/playbooks/procedures/*.yml -x 301 --force-color"
  extends: .ansible-changes
  needs: ['Ensure ansible-lint docker image exists']

Roles dir test:
  stage: ansible-lint
  script: /bin/bash -c "$ANSIBLE_LINT_CMD ansible/playbooks/roles/*.yml -x 301 --force-color"
  extends: .ansible-changes
  needs: ['Ensure ansible-lint docker image exists']

# ------------------------------------------------------------------------------
#
# shellcheck Scripts
#
# ------------------------------------------------------------------------------

Packer Build vmware test:
  stage: shellcheck
  script: shellcheck --format=tty --color=always packer/build-vmware.sh
  only:
    changes:
      - packer/build-vmware.sh
  needs: ['Ensure shellcheck has correct version']


Packer network fix script test:
  stage: shellcheck
  script: shellcheck --format=tty --color=always packer/scripts/fix-network.sh
  only:
    changes:
      - packer/scripts/fix-network.sh
  needs: ['Ensure shellcheck has correct version']

Packer shrink test:
  stage: shellcheck
  script: shellcheck --format=tty --color=always packer/scripts/shrink-image.sh
  only:
    changes:
      - packer/scripts/shrink-image.sh
  needs: ['Ensure shellcheck has correct version']

Packer offline image test:
  stage: shellcheck
  script: shellcheck --format=tty --color=always prepare-offline-installation.sh
  only:
    changes:
      - prepare-offline-installation.sh
  needs: ['Ensure shellcheck has correct version']

Packer unique test:
  stage: shellcheck
  script: shellcheck --format=tty --color=always packer/scripts/make-unique.sh
  only:
    changes:
      - packer/scripts/make-unique.sh
  needs: ['Ensure shellcheck has correct version']

Packer guest tools test:
  stage: shellcheck
  script: shellcheck --format=tty --color=always packer/scripts/vm-guest-tools.sh
  only:
    changes:
      - packer/scripts/vm-guest-tools.sh
  needs: ['Ensure shellcheck has correct version']

OCSP wrapper test:
  stage: shellcheck
  script: shellcheck --format=tty --color=always ansible/roles/frontend/files/ocsp.sh
  only:
    changes:
      - ansible/roles/frontend/files/ocsp.sh
  needs: ['Ensure shellcheck has correct version']

Backup / Restore test:
  stage: shellcheck
  script: shellcheck --format=tty --color=always ansible/roles/db/files/backup_restore_db.sh
  only:
    changes:
      - ansible/roles/db/files/backup_restore_db.sh
  needs: ['Ensure shellcheck has correct version']

Offline installation test:
  stage: shellcheck
  script: shellcheck --format=tty --color=always packer/scripts/prepare-offline-installation.sh
  only:
    changes:
      - packer/scripts/prepare-offline-installation.sh
  needs: ['Ensure shellcheck has correct version']

TWCTL test:
  stage: shellcheck
  script: shellcheck --format=tty --color=always ansible/roles/management/files/twctl
  only:
    changes:
      - ansible/roles/management/files/twctl
  needs: ['Ensure shellcheck has correct version']

Login banner test:
  stage: shellcheck
  script: shellcheck --format=tty --color=always ansible/roles/management/files/motd.sh
  only:
    changes:
      - ansible/roles/management/files/motd.sh
  needs: ['Ensure shellcheck has correct version']

# ------------------------------------------------------------------------------
#
# GO LINT TEST
#
# ------------------------------------------------------------------------------

OcspResonder test:
  stage: Golint
  script: /bin/bash -c "$GOLINT_CMD ansible/roles/go/files/ocspResponder.go"
  only:
    changes:
      - ansible/roles/go/files/ocspResponder.go
  needs: ['Ensure golint docker image exists']

Archiving test:
  stage: Golint
  script: /bin/bash -c "$GOLINT_CMD ansible/roles/go/files/archiving.go"
  only:
    changes:
      - ansible/roles/go/files/archiving.go
  needs: ['Ensure golint docker image exists']

